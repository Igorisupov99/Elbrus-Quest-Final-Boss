const axios = require('axios');

async function testFilterValidation() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ñ—É–Ω–∫—Ü–∏–∏ filterArray...\n');
    
    const testData = {
      taskId: 'test-filter',
      userCode: `function filterArray(numbers, predicate) {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤     
    let filteredArray = [];

    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
    for (let i = 0; i < numbers.length; i++) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —É—Å–ª–æ–≤–∏—é, –∑–∞–¥–∞–Ω–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–µ–π-–ø—Ä–µ–¥–∏–∫–∞—Ç–æ–º
        if (predicate(numbers[i])) {
            // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—é, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
            filteredArray.push(numbers[i]);
        }
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
    return filteredArray;
}`,
      taskDescription: '–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–∞—Å—Å–∏–≤–∞ —Å –ø–æ–º–æ—â—å—é –ø—Ä–µ–¥–∏–∫–∞—Ç–∞',
      testCases: [
        { 
          input: [[1, 2, 3, 4, 5], (x) => x > 2], 
          expectedOutput: [3, 4, 5], 
          description: '–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —á–∏—Å–µ–ª –±–æ–ª—å—à–µ 2' 
        },
        { 
          input: [[10, 20, 30, 40], (x) => x < 25], 
          expectedOutput: [10, 20], 
          description: '–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —á–∏—Å–µ–ª –º–µ–Ω—å—à–µ 25' 
        },
        { 
          input: [[1, 3, 5, 7, 9], (x) => x % 2 === 0], 
          expectedOutput: [], 
          description: '–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —á–µ—Ç–Ω—ã—Ö —á–∏—Å–µ–ª –∏–∑ –Ω–µ—á–µ—Ç–Ω—ã—Ö' 
        }
      ]
    };

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é...');
    const response = await axios.post('http://localhost:3000/api/ai/ide/validate-code-test', testData);
    
    console.log('üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:');
    console.log(JSON.stringify(response.data, null, 2));
    
    if (response.data.passedTests > 0) {
      console.log('\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –¢–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç.');
    } else {
      console.log('\n‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    if (error.response) {
      console.error('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error.response.data);
    } else if (error.request) {
      console.error('–ó–∞–ø—Ä–æ—Å –Ω–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', error.request);
    } else {
      console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
    }
  }
}

// –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
setTimeout(testFilterValidation, 3000);
