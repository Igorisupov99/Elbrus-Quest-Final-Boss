const db = require('../../db/models');
const { incorrectAnswersMap } = require("../controllers/question.controller");

const lobbyUsers = new Map();
const lobbyPoints = new Map();
const lobbyTimeouts = new Map();
const lobbyExamState = new Map(); // lobbyId -> { questions: any[], index: number, correctAnswers: number, totalQuestions: number, examId: string }
const lobbyReconnectTimers = new Map(); // lobbyId -> { timerId: number, activePlayerId: number, activePlayerName: string }

function initLobbySockets(nsp) {
  nsp.on('connection', async (socket) => {
    const { lobbyId } = socket.handshake.auth;
    if (!lobbyId) {
      socket.emit('error', { message: '–õ–æ–±–±–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ' });
      socket.disconnect();
      return;
    }

    if (lobbyTimeouts.has(lobbyId)) {
      clearTimeout(lobbyTimeouts.get(lobbyId));
      lobbyTimeouts.delete(lobbyId);
    }

    socket.lobbyId = lobbyId;
    const roomKey = `lobby:${lobbyId}`;
    socket.join(roomKey);

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫
    if (!lobbyUsers.has(lobbyId)) {
      lobbyUsers.set(lobbyId, new Map());
    }
    lobbyUsers.get(lobbyId).set(socket.id, {
      id: socket.user.id,
      username: socket.user.username,
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤
    const user = await db.User.findByPk(socket.user.id);
    const session = await db.UserSession.findOne({
      where: { user_id: socket.user.id, game_session_id: lobbyId },
    });

    const incorrectAnswers = incorrectAnswersMap.get(lobbyId) || 0;
    // –û–±—â–∏–π —Å—á—ë—Ç –ª–æ–±–±–∏ ‚Äî —Å—É–º–º–∞ –ø–æ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
    const allSessions = await db.UserSession.findAll({ where: { game_session_id: lobbyId } });
    const lobbyTotalScore = allSessions.reduce((sum, s) => sum + Number(s.score || 0), 0);

    socket.emit("lobby:initScores", {
      userId: socket.user.id,
      userScore: user?.score ?? 0,
      sessionScore: lobbyTotalScore,
      incorrectAnswers, // –æ–±—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ–π –∫–æ–º–Ω–∞—Ç—ã
    });
    

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    async function emitUsersList() {
      try {
        const users = Array.from(lobbyUsers.get(lobbyId).values());

        const activeUserSession = await db.UserSession.findOne({
          where: {
            game_session_id: lobbyId,
            is_user_active: true,
          },
          include: [{ model: db.User, as: 'user' }],
        });

        const activePlayerId = activeUserSession ? activeUserSession.user.id : null;

        nsp.to(roomKey).emit('lobby:users', { users, activePlayerId });
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞:', err);
        const users = Array.from(lobbyUsers.get(lobbyId).values());
        const activePlayerId = users.length > 0 ? users[0].id : null;
        nsp.to(roomKey).emit('lobby:users', { users, activePlayerId });
      }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    function startReconnectTimer(activePlayerId, activePlayerName) {
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å
      if (lobbyReconnectTimers.has(lobbyId)) {
        const existingTimer = lobbyReconnectTimers.get(lobbyId);
        clearTimeout(existingTimer.timerId);
      }

      console.log(`‚è≥ [RECONNECT] –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è ${activePlayerName} (ID: ${activePlayerId})`);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –æ –Ω–∞—á–∞–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
      nsp.to(roomKey).emit('lobby:reconnectWaiting', {
        activePlayerName,
        timeLeft: 30
      });

      const timerId = setTimeout(async () => {
        console.log(`‚è∞ [RECONNECT] –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ, –ø–µ—Ä–µ–¥–∞–µ–º —Ö–æ–¥ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É`);
        
        // –ü–µ—Ä–µ–¥–∞–µ–º —Ö–æ–¥ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
        await passTurnToNextPlayer();
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è
        nsp.to(roomKey).emit('lobby:reconnectTimeout');
        
        // –£–¥–∞–ª—è–µ–º —Ç–∞–π–º–µ—Ä –∏–∑ Map
        lobbyReconnectTimers.delete(lobbyId);
      }, 30000); // 30 —Å–µ–∫—É–Ω–¥

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –≤ Map
      lobbyReconnectTimers.set(lobbyId, {
        timerId,
        activePlayerId,
        activePlayerName
      });
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–∞–π–º–µ—Ä–∞ –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    function cancelReconnectTimer() {
      if (lobbyReconnectTimers.has(lobbyId)) {
        const timer = lobbyReconnectTimers.get(lobbyId);
        clearTimeout(timer.timerId);
        lobbyReconnectTimers.delete(lobbyId);
        
        console.log(`‚úÖ [RECONNECT] –¢–∞–π–º–µ—Ä –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω –¥–ª—è –ª–æ–±–±–∏ ${lobbyId}`);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –æ–± –æ—Ç–º–µ–Ω–µ –æ–∂–∏–¥–∞–Ω–∏—è
        nsp.to(roomKey).emit('lobby:reconnectCanceled');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∞–∫—Ç–∏–≤–µ–Ω —ç–∫–∑–∞–º–µ–Ω –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
        const examState = lobbyExamState.get(lobbyId);
        if (examState) {
          console.log(`üîÑ [EXAM] –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–∫–∑–∞–º–µ–Ω –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏–≤—à–µ–≥–æ—Å—è –∏–≥—Ä–æ–∫–∞`);
          console.log(`üìä [EXAM] –°–æ—Å—Ç–æ—è–Ω–∏–µ: –≤–æ–ø—Ä–æ—Å ${examState.index + 1}/${examState.totalQuestions}, –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${examState.correctAnswers}`);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–∫–∑–∞–º–µ–Ω–∞ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
          nsp.to(roomKey).emit('lobby:examRestore', {
            examId: examState.examId,
            questions: examState.questions,
            currentIndex: examState.index,
            correctAnswers: examState.correctAnswers,
            totalQuestions: examState.totalQuestions,
            currentQuestion: examState.questions[examState.index]
          });
          
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–∞–º–µ–Ω–∞
          nsp.to(roomKey).emit('lobby:examTimerReset', { timeLeft: 30 });
        }
      }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ö–æ–¥–∞ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
    async function passTurnToNextPlayer() {
      try {
        const currentActivePlayer = await db.UserSession.findOne({
          where: { game_session_id: lobbyId, is_user_active: true },
        });

        if (!currentActivePlayer) return;

        const allPlayers = await db.UserSession.findAll({
          where: { game_session_id: lobbyId },
          order: [['createdAt', 'ASC']],
          include: [{ model: db.User, as: 'user' }],
        });

        if (allPlayers.length <= 1) return;

        const currentIndex = allPlayers.findIndex(
          (player) => player.id === currentActivePlayer.id
        );
        const nextIndex = (currentIndex + 1) % allPlayers.length;
        const nextPlayer = allPlayers[nextIndex];

        await db.UserSession.update(
          { is_user_active: false },
          { where: { id: currentActivePlayer.id } }
        );
        await db.UserSession.update(
          { is_user_active: true },
          { where: { id: nextPlayer.id } }
        );

        console.log(
          `üéÆ –•–æ–¥ –ø–µ—Ä–µ–¥–∞–Ω –æ—Ç ${currentActivePlayer.player_name} –∫ ${nextPlayer.player_name}`
        );

        await emitUsersList();
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ —Ö–æ–¥–∞:', err);
      }
    }

    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è ${lobbyId}: ${socket.user.username}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    const reconnectTimer = lobbyReconnectTimers.get(lobbyId);
    if (reconnectTimer && reconnectTimer.activePlayerId === socket.user.id) {
      console.log(`‚úÖ [RECONNECT] –ò–≥—Ä–æ–∫ ${socket.user.username} –≤–µ—Ä–Ω—É–ª—Å—è, –æ—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –æ–∂–∏–¥–∞–Ω–∏—è`);
      cancelReconnectTimer();
    }

    // --- —Å–æ–∑–¥–∞–Ω–∏–µ / –ø–æ–ª—É—á–µ–Ω–∏–µ UserSession ---
    try {
      let userSession = await db.UserSession.findOne({
        where: { game_session_id: lobbyId, user_id: socket.user.id },
      });

      if (!userSession) {
        userSession = await db.UserSession.create({
          game_session_id: lobbyId,
          user_id: socket.user.id,
          score: 0,
          is_user_active: false,
          player_name: socket.user.username,
        });
      }

      // –Ω–∞–∑–Ω–∞—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç
      const existingActivePlayer = await db.UserSession.findOne({
        where: { game_session_id: lobbyId, is_user_active: true },
      });

      if (!existingActivePlayer) {
        await userSession.update({ is_user_active: true });
        console.log(
          `üéÆ –ü–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫ –≤ –ª–æ–±–±–∏ ${lobbyId}: ${socket.user.username}`
        );
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UserSession:', err);
    }

    await emitUsersList();

    // –∑–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    (async () => {
      try {
        const lastMessages = await db.ChatGameSession.findAll({
          where: { game_session_id: lobbyId },
          include: [
            { model: db.User, as: 'user', attributes: ['id', 'username'] },
          ],
          order: [['createdAt', 'ASC']],
          limit: 20,
        });

        const history = lastMessages.map((m) => ({
          id: m.id,
          text: m.message,
          user: { id: m.user.id, username: m.user.username },
          createdAt: m.createdAt,
        }));

        socket.emit('chat:history', history);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞:', err);
      }
    })();

    // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—á–µ–∫
    if (!lobbyPoints.has(lobbyId)) {
      lobbyPoints.set(lobbyId, [
        { id: '1', status: 'available', phase_id: 1, topic_id: 1 },
        { id: '2', status: 'available', phase_id: 1, topic_id: 2 },
        { id: '3', status: 'available', phase_id: 1, topic_id: 3 },
        { id: '4', status: 'available', phase_id: 1, topic_id: 4 },
        { id: 'exam', status: 'locked', phase_id: 1, topic_id: 0 },
        // –§–∞–∑–∞ 2 (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç–∫–∑–∞–º–µ–Ω–∞ 1)
        { id: '5', status: 'locked', phase_id: 2, topic_id: 6 },
        { id: '6', status: 'locked', phase_id: 2, topic_id: 7 },
        { id: '7', status: 'locked', phase_id: 2, topic_id: 8 },
        { id: '8', status: 'locked', phase_id: 2, topic_id: 9 },
        { id: 'exam2', status: 'locked', phase_id: 2, topic_id: 0 },
      ]);
    }
    socket.emit('lobby:initPoints', lobbyPoints.get(lobbyId));

    // —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    nsp.to(roomKey).emit('system', {
      type: 'join',
      userId: socket.user.id,
      username: socket.user.username,
    });

    // --- –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
    socket.on('chat:message', async ({ text }) => {
      try {
        if (!text?.trim()) {
          socket.emit('error', { message: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ' });
          return;
        }

        const created = await db.ChatGameSession.create({
          game_session_id: lobbyId,
          user_id: socket.user.id,
          message: text.trim(),
        });

        const dto = {
          id: created.id,
          text: created.message,
          user: { id: socket.user.id, username: socket.user.username },
          createdAt: created.createdAt,
        };

        nsp.to(roomKey).emit('chat:message', dto);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
        socket.emit('error', { message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ' });
      }
    });

    socket.on('leaveLobby', async () => {
      try {
        const wasActive = await db.UserSession.findOne({
          where: {
            game_session_id: lobbyId,
            user_id: socket.user.id,
            is_user_active: true,
          },
        });

        if (wasActive) {
          const nextPlayer = await db.UserSession.findOne({
            where: {
              game_session_id: lobbyId,
              user_id: { [db.Sequelize.Op.ne]: socket.user.id },
            },
            order: [['createdAt', 'ASC']],
          });

          if (nextPlayer) {
            await db.UserSession.update(
              { is_user_active: true },
              { where: { id: nextPlayer.id } }
            );
            await db.UserSession.update(
              { is_user_active: false },
              { where: { id: wasActive.id } }
            );
            await emitUsersList();
          }
        }
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã—Ö–æ–¥–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞:', err);
      }

      socket.leave(roomKey);

      if (lobbyUsers.has(lobbyId)) {
        lobbyUsers.get(lobbyId).delete(socket.id);
        await emitUsersList();
      }

      nsp.to(roomKey).emit('system', {
        type: 'leave',
        userId: socket.user.id,
        username: socket.user.username,
      });
    });

    socket.on('lobby:answer', async ({ pointId, correct, answer }) => {
      try {
        console.log(`üéØ [SOCKET] –ü–æ–ª—É—á–µ–Ω lobby:answer: pointId=${pointId}, correct=${correct}, userId=${socket.user.id}`);
        
        const activeUserSession = await db.UserSession.findOne({
          where: { game_session_id: lobbyId, is_user_active: true },
        });

        if (!activeUserSession || activeUserSession.user_id !== socket.user.id) {
          console.log(`‚ùå [SOCKET] –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–≥—Ä–æ–∫ –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å: active=${activeUserSession?.user_id}, current=${socket.user.id}`);
          socket.emit('error', { message: '–°–µ–π—á–∞—Å –æ—Ç–≤–µ—á–∞–µ—Ç –¥—Ä—É–≥–æ–π –∏–≥—Ä–æ–∫' });
          return;
        }

        console.log(`‚úÖ [SOCKET] –ê–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫ –æ—Ç–≤–µ—á–∞–µ—Ç: ${socket.user.username}`);

        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å–æ –≤—Å–µ–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏
        if (answer !== undefined) {
          nsp.to(roomKey).emit('lobby:answerSync', { 
            answer: answer,
            activePlayerName: socket.user.username 
          });
        }

        const status = correct ? 'completed' : 'available';
        const points = lobbyPoints.get(lobbyId);
        if (points) {
          const point = points.find((p) => p.id === pointId);
          if (point) point.status = status;
        }

        // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        if (!correct) {
          const current = incorrectAnswersMap.get(lobbyId) || 0;
          const newCount = current + 1;
          incorrectAnswersMap.set(lobbyId, newCount);
          
          console.log(`üìä [SOCKET] –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${current} -> ${newCount}`);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
          const allSessions = await db.UserSession.findAll({ where: { game_session_id: lobbyId } });
          const lobbyTotalScore = allSessions.reduce((sum, s) => sum + Number(s.score || 0), 0);
          
          const payload = {
            userId: socket.user.id,
            userScore: activeUserSession.score || 0,
            sessionScore: lobbyTotalScore,
            incorrectAnswers: newCount,
          };
          
          console.log(`üì° [SOCKET] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º lobby:incorrectAnswer:`, payload);
          nsp.to(roomKey).emit('lobby:incorrectAnswer', payload);
        }

        nsp.to(roomKey).emit('lobby:updatePointStatus', { pointId, status });
        console.log(`üîÑ [SOCKET] –ü–µ—Ä–µ–¥–∞–µ–º —Ö–æ–¥ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É`);
        await passTurnToNextPlayer();
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞:', err);
      }
    });

    socket.on('lobby:incorrectAnswer', (payload) => {
      console.log('üì° [SOCKET] –ü–æ–ª—É—á–µ–Ω–æ lobby:incorrectAnswer, –ø–µ—Ä–µ—Å—ã–ª–∞—é:', payload);
      console.log('üì° [SOCKET] –ö–æ–º–Ω–∞—Ç–∞:', roomKey);
      
      // –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ—Å—Ç—å –ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –∏ –∫–ª–∏–µ–Ω—Ç—ã –≤ –Ω–µ–π
      const room = nsp.adapter.rooms.get(roomKey);
      console.log('üì° [SOCKET] –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–Ω–∞—Ç—ã:', room ? Array.from(room) : '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      
      nsp.to(roomKey).emit('lobby:incorrectAnswer', payload);
      console.log('üì° [SOCKET] –°–æ–±—ã—Ç–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ –∫–æ–º–Ω–∞—Ç—É:', roomKey);
    });

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
    socket.on('lobby:timeout', async (payload) => {
      console.log('üì° [SOCKET] –ü–æ–ª—É—á–µ–Ω–æ lobby:timeout, –ø–µ—Ä–µ—Å—ã–ª–∞—é:', payload);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ timeout –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫
      const activeUserSession = await db.UserSession.findOne({
        where: { game_session_id: lobbyId, is_user_active: true },
      });

      if (activeUserSession && activeUserSession.user_id === socket.user.id) {
        console.log('‚è∞ [SOCKET] Timeout –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞, –ø–µ—Ä–µ–¥–∞–µ–º —Ö–æ–¥ —Å–ª–µ–¥—É—é—â–µ–º—É');
        await passTurnToNextPlayer();
      }
      
      nsp.to(roomKey).emit('lobby:timeout', payload);
      console.log('üì° [SOCKET] –°–æ–±—ã—Ç–∏–µ timeout –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ –∫–æ–º–Ω–∞—Ç—É:', roomKey);
    });

    // –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ –≤—Å–µ–º –≤ –ª–æ–±–±–∏
    socket.on('lobby:closeModal', () => {
      console.log('üîí [SOCKET] –ü–æ–ª—É—á–µ–Ω–æ lobby:closeModal, –ø–µ—Ä–µ—Å—ã–ª–∞—é –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º');
      nsp.to(roomKey).emit('lobby:closeModal');
      console.log('üîí [SOCKET] –°–æ–±—ã—Ç–∏–µ closeModal –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ –∫–æ–º–Ω–∞—Ç—É:', roomKey);
    });

    // –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ –≤—Å–µ–º –≤ –ª–æ–±–±–∏
    socket.on('lobby:openModal', (payload) => {
      try {
        if (!payload?.questionId || !payload?.question) return;
        nsp.to(roomKey).emit('lobby:openModal', payload);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –≤ lobby:openModal:', err);
      }
    });

    socket.on('lobby:openExam', (payload) => {
      try {
        const questions = payload?.questions || [];
        const examId = payload?.examId === 'exam2' ? 'exam2' : 'exam';
        lobbyExamState.set(lobbyId, { 
          questions, 
          index: 0, 
          correctAnswers: 0, 
          totalQuestions: questions.length, 
          examId 
        });
        nsp.to(roomKey).emit('lobby:examStart', { questions, index: 0 });
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –≤ lobby:openExam:', err);
      }
    });

    socket.on('lobby:passTurn', async () => {
      try {
        console.log(`üéÆ [SOCKET] –ü–µ—Ä–µ–¥–∞–µ–º —Ö–æ–¥ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É –ø–æ –∑–∞–ø—Ä–æ—Å—É`);
        await passTurnToNextPlayer();
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ —Ö–æ–¥–∞:', err);
      }
    });

    socket.on('lobby:passTurnNotification', () => {
      console.log('üì¢ [SOCKET] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–¥–∞—á–µ —Ö–æ–¥–∞ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º');
      nsp.to(roomKey).emit('lobby:passTurnNotification');
    });

    socket.on('lobby:incorrectCountUpdate', async ({ incorrectAnswers }) => {
      try {
        console.log(`üìä [SOCKET] –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${incorrectAnswers}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        incorrectAnswersMap.set(lobbyId, incorrectAnswers);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –≤ –ª–æ–±–±–∏
        nsp.to(roomKey).emit('lobby:incorrectCountUpdate', { incorrectAnswers });
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:', err);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤–≤–æ–¥–∞ –≤ –æ–±—ã—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö
    socket.on('lobby:answerInput', ({ answer, activePlayerName }) => {
      console.log('üîÑ [SOCKET] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–≤–æ–¥–∞ –≤ –≤–æ–ø—Ä–æ—Å–µ:', { answer, activePlayerName });
      nsp.to(roomKey).emit('lobby:answerInput', { answer, activePlayerName });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤–≤–æ–¥–∞ –≤ —ç–∫–∑–∞–º–µ–Ω–µ
    socket.on('lobby:examAnswerInput', ({ answer, activePlayerName }) => {
      console.log('üîÑ [SOCKET] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–≤–æ–¥–∞ –≤ —ç–∫–∑–∞–º–µ–Ω–µ:', { answer, activePlayerName });
      nsp.to(roomKey).emit('lobby:examAnswerInput', { answer, activePlayerName });
    });

    socket.on('lobby:examAnswer', async (payload) => {
      try {
        const state = lobbyExamState.get(lobbyId);
        if (!state) return;
        const isCorrect = Boolean(payload && payload.correct);
        const isExamClosedByUser = payload.answer === 'exam_closed_by_user';
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å–æ –≤—Å–µ–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏
        if (payload.answer !== undefined && !isExamClosedByUser) {
          nsp.to(roomKey).emit('lobby:examAnswerSync', { 
            answer: payload.answer,
            activePlayerName: socket.user.username 
          });
        }

        // –ï—Å–ª–∏ —ç–∫–∑–∞–º–µ–Ω –∑–∞–∫—Ä—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º - –ø—Ä–æ–≤–∞–ª–∏–≤–∞–µ–º –µ–≥–æ
        if (isExamClosedByUser) {
          console.log('‚ùå [EXAM] –≠–∫–∑–∞–º–µ–Ω –ø—Ä–æ–≤–∞–ª–µ–Ω –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
          
          // –ü—Ä–æ–≤–∞–ª–∏–≤–∞–µ–º —ç–∫–∑–∞–º–µ–Ω - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∞–∑—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
          lobbyExamState.delete(lobbyId);
          
          // –û–±–Ω—É–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø—Ä–∏ –ø—Ä–æ–≤–∞–ª–µ —ç–∫–∑–∞–º–µ–Ω–∞
          incorrectAnswersMap.set(lobbyId, 0);
          console.log(`üéØ [SOCKET] –°—á—ë—Ç—á–∏–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –æ–±–Ω—É–ª—ë–Ω –ø—Ä–∏ –ø—Ä–æ–≤–∞–ª–µ —ç–∫–∑–∞–º–µ–Ω–∞ –¥–ª—è –ª–æ–±–±–∏ ${lobbyId}`);
          
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∞–∑—É - –¥–µ–ª–∞–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
          const points = lobbyPoints.get(lobbyId);
          if (points) {
            const currentPhaseId = state.examId === 'exam2' ? 2 : 1;
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–¥–æ—Å—Ç—É–ø–Ω–æ" –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
            points.forEach(p => {
              if (p.phase_id === currentPhaseId) {
                p.status = 'available';
              }
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —Ç–æ—á–µ–∫ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞—Ö
            points.forEach(p => {
              if (p.phase_id === currentPhaseId) {
                nsp.to(roomKey).emit('lobby:updatePointStatus', { pointId: p.id, status: p.status });
              }
            });
          }
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–∞–ª–µ —ç–∫–∑–∞–º–µ–Ω–∞
          nsp.to(roomKey).emit('lobby:examFailed', {
            message: `‚ùå –≠–∫–∑–∞–º–µ–Ω –ø—Ä–æ–≤–∞–ª–µ–Ω! –≠–∫–∑–∞–º–µ–Ω –±—ã–ª –∑–∞–∫—Ä—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –§–∞–∑–∞ ${state.examId === 'exam2' ? '2' : '1'} —Å–±—Ä–æ—à–µ–Ω–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è.`,
            correctAnswers: state.correctAnswers,
            totalQuestions: state.totalQuestions,
            successRate: state.correctAnswers / state.totalQuestions,
            phaseId: state.examId === 'exam2' ? 2 : 1
          });
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–æ–±–Ω—É–ª—è–µ–º –ø—Ä–∏ –ø—Ä–æ–≤–∞–ª–µ)
          nsp.to(roomKey).emit('lobby:incorrectCountUpdate', { incorrectAnswers: 0 });
          
          // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É —ç–∫–∑–∞–º–µ–Ω–∞
          nsp.to(roomKey).emit('lobby:closeExamModal');
          
          // –ü–µ—Ä–µ–¥–∞–µ–º —Ö–æ–¥ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
          await passTurnToNextPlayer();
          return;
        }

        if (isCorrect) {
          // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
          state.correctAnswers += 1;
          lobbyExamState.set(lobbyId, state);
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
          nsp.to(roomKey).emit('lobby:examCorrectAnswer', {
            message: '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! –•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É'
          });
          
          // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã, –∑–∞—Ç–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
          setTimeout(async () => {
            const nextIndex = state.index + 1;
            if (nextIndex < state.questions.length) {
              state.index = nextIndex;
              lobbyExamState.set(lobbyId, state);
              const nextQuestion = state.questions[nextIndex];
              nsp.to(roomKey).emit('lobby:examNext', { index: nextIndex, question: nextQuestion });
              
              // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
              nsp.to(roomKey).emit('lobby:examTimerReset', { timeLeft: 30 });
            } else {
              // –≠–∫–∑–∞–º–µ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω - –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
              const successRate = state.correctAnswers / state.totalQuestions;
              const isExamPassed = successRate >= 0.6; // 60% –º–∏–Ω–∏–º—É–º
              
              console.log(`üìä [EXAM] –†–µ–∑—É–ª—å—Ç–∞—Ç —ç–∫–∑–∞–º–µ–Ω–∞: ${state.correctAnswers}/${state.totalQuestions} (${(successRate * 100).toFixed(1)}%)`);
              
              if (isExamPassed) {
                // –≠–∫–∑–∞–º–µ–Ω —Å–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ
                lobbyExamState.delete(lobbyId);
                
                // –û–±–Ω—É–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Å–¥–∞—á–∏ —ç–∫–∑–∞–º–µ–Ω–∞
                incorrectAnswersMap.set(lobbyId, 0);
                console.log(`üéØ [SOCKET] –°—á—ë—Ç—á–∏–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –æ–±–Ω—É–ª—ë–Ω –¥–ª—è –ª–æ–±–±–∏ ${lobbyId}`);
                
                // –ù–∞—á–∏—Å–ª—è–µ–º 30 –æ—á–∫–æ–≤ –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É –≤ –ª–æ–±–±–∏ –∑–∞ —É—Å–ø–µ—à–Ω—É—é —Å–¥–∞—á—É —ç–∫–∑–∞–º–µ–Ω–∞
                try {
                  const { User, UserSession } = require("../../db/models");
                  const rewardPoints = 30;
                  
                  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –ª–æ–±–±–∏
                  const allSessions = await UserSession.findAll({ 
                    where: { game_session_id: lobbyId } 
                  });
                  
                  // –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É
                  for (const session of allSessions) {
                    const user = await User.findByPk(session.user_id);
                    if (user) {
                      user.score = Number(user.score || 0) + rewardPoints;
                      await user.save();
                    }
                    
                    session.score = Number(session.score || 0) + rewardPoints;
                    await session.save();
                  }
                  
                  // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π —Å—á—ë—Ç –ª–æ–±–±–∏
                  const updatedSessions = await UserSession.findAll({ 
                    where: { game_session_id: lobbyId } 
                  });
                  const lobbyTotalScore = updatedSessions.reduce((sum, s) => sum + Number(s.score || 0), 0);
                  
                  // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                  const userScores = [];
                  for (const session of updatedSessions) {
                    const user = await User.findByPk(session.user_id);
                    if (user) {
                      console.log(`üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${session.user_id}: session.score=${session.score}, user.score=${user.score}`);
                      userScores.push({
                        userId: session.user_id,
                        userScore: user.score
                      });
                    }
                  }
                  
                  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ—á–∫–∏ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
                  nsp.to(roomKey).emit('lobby:examReward', {
                    message: 'üéâ –≠–∫–∑–∞–º–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–¥–∞–Ω! –ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∏–ª +30 –æ—á–∫–æ–≤!',
                    rewardPoints,
                    sessionScore: lobbyTotalScore,
                    userScores: userScores
                  });
                  
                  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–æ–±–Ω—É–ª—è–µ–º –ø–æ—Å–ª–µ —ç–∫–∑–∞–º–µ–Ω–∞)
                  nsp.to(roomKey).emit('lobby:incorrectCountUpdate', { incorrectAnswers: 0 });
                  
                } catch (error) {
                  console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –æ—á–∫–æ–≤ –∑–∞ —ç–∫–∑–∞–º–µ–Ω:', error);
                }
                
                // –û–±–Ω–æ–≤–∏–º —Ç–æ—á–∫—É —ç–∫–∑–∞–º–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∏ –∏–∑–≤–µ—Å—Ç–∏–º –≤—Å–µ—Ö
                const points = lobbyPoints.get(lobbyId);
                if (points) {
                  const examKey = state.examId === 'exam2' ? 'exam2' : 'exam';
                  const examPoint = points.find((p) => p.id === examKey);
                  if (examPoint) examPoint.status = 'completed';
                  if (examKey === 'exam') {
                    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Ç–µ–º—ã —Ñ–∞–∑—ã 2 —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —ç–∫–∑–∞–º–µ–Ω–∞
                    points.forEach(p => {
                      if (p.phase_id === 2 && p.id !== 'exam2' && p.status === 'locked') {
                        p.status = 'available';
                      }
                    });
                  }
                }
                const examKey = state.examId === 'exam2' ? 'exam2' : 'exam';
                nsp.to(roomKey).emit('lobby:updatePointStatus', { pointId: examKey, status: 'completed' });
                // –†–∞–∑–æ—Å–ª–∞—Ç—å –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã –ø–æ —Ñ–∞–∑–µ 2
                const updatedPoints = lobbyPoints.get(lobbyId) || [];
                updatedPoints.forEach(p => {
                  if (p.phase_id === 2 && p.id !== 'exam2') {
                    nsp.to(roomKey).emit('lobby:updatePointStatus', { pointId: p.id, status: p.status });
                  }
                });
                nsp.to(roomKey).emit('lobby:examComplete');
                // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–∫—Ä–æ–µ–º –ª—é–±—ã–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –º–æ–¥–∞–ª–∫–∏
                nsp.to(roomKey).emit('lobby:closeModal');
              } else {
                // –≠–∫–∑–∞–º–µ–Ω –ø—Ä–æ–≤–∞–ª–µ–Ω - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∞–∑—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
                console.log(`‚ùå [EXAM] –≠–∫–∑–∞–º–µ–Ω –ø—Ä–æ–≤–∞–ª–µ–Ω! –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∞–∑—É ${state.examId} –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è`);
                lobbyExamState.delete(lobbyId);
                
                // –û–±–Ω—É–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø—Ä–∏ –ø—Ä–æ–≤–∞–ª–µ —ç–∫–∑–∞–º–µ–Ω–∞
                incorrectAnswersMap.set(lobbyId, 0);
                console.log(`üéØ [SOCKET] –°—á—ë—Ç—á–∏–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –æ–±–Ω—É–ª—ë–Ω –ø—Ä–∏ –ø—Ä–æ–≤–∞–ª–µ —ç–∫–∑–∞–º–µ–Ω–∞ –¥–ª—è –ª–æ–±–±–∏ ${lobbyId}`);
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∞–∑—É - –¥–µ–ª–∞–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
                const points = lobbyPoints.get(lobbyId);
                if (points) {
                  const currentPhaseId = state.examId === 'exam2' ? 2 : 1;
                  
                  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–¥–æ—Å—Ç—É–ø–Ω–æ" –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
                  points.forEach(p => {
                    if (p.phase_id === currentPhaseId) {
                      p.status = 'available';
                    }
                  });
                  
                  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —Ç–æ—á–µ–∫ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞—Ö
                  points.forEach(p => {
                    if (p.phase_id === currentPhaseId) {
                      nsp.to(roomKey).emit('lobby:updatePointStatus', { pointId: p.id, status: p.status });
                    }
                  });
                }
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–∞–ª–µ —ç–∫–∑–∞–º–µ–Ω–∞
                nsp.to(roomKey).emit('lobby:examFailed', {
                  message: `‚ùå –≠–∫–∑–∞–º–µ–Ω –ø—Ä–æ–≤–∞–ª–µ–Ω! –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${state.correctAnswers}/${state.totalQuestions} (${(successRate * 100).toFixed(1)}%). –§–∞–∑–∞ ${state.examId === 'exam2' ? '2' : '1'} —Å–±—Ä–æ—à–µ–Ω–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è.`,
                  correctAnswers: state.correctAnswers,
                  totalQuestions: state.totalQuestions,
                  successRate: successRate,
                  phaseId: state.examId === 'exam2' ? 2 : 1
                });
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–æ–±–Ω—É–ª—è–µ–º –ø—Ä–∏ –ø—Ä–æ–≤–∞–ª–µ)
                nsp.to(roomKey).emit('lobby:incorrectCountUpdate', { incorrectAnswers: 0 });
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É —ç–∫–∑–∞–º–µ–Ω–∞
                nsp.to(roomKey).emit('lobby:closeModal');
              }
            }
            
            // –ü–µ—Ä–µ–¥–∞–µ–º —Ö–æ–¥ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await passTurnToNextPlayer();
          }, 2000); // 2 —Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∏
        } else {
          // –ü—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –≤ —ç–∫–∑–∞–º–µ–Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
          const isTimeout = payload && payload.isTimeout;
          const message = isTimeout 
            ? '‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ. –û—Ç–≤–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω –∫–∞–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π.'
            : '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! –•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É';
            
          nsp.to(roomKey).emit('lobby:examIncorrectAnswer', {
            message
          });
          
          // –ü—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –≤ —ç–∫–∑–∞–º–µ–Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
          const nextIndex = state.index + 1;
          if (nextIndex < state.questions.length) {
            state.index = nextIndex;
            lobbyExamState.set(lobbyId, state);
            const nextQuestion = state.questions[nextIndex];
            nsp.to(roomKey).emit('lobby:examNext', { index: nextIndex, question: nextQuestion });
            
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
            nsp.to(roomKey).emit('lobby:examTimerReset', { timeLeft: 30 });
          } else {
            // –≠–∫–∑–∞–º–µ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω - –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
            const successRate = state.correctAnswers / state.totalQuestions;
            const isExamPassed = successRate >= 0.6; // 60% –º–∏–Ω–∏–º—É–º
            
            console.log(`üìä [EXAM] –†–µ–∑—É–ª—å—Ç–∞—Ç —ç–∫–∑–∞–º–µ–Ω–∞: ${state.correctAnswers}/${state.totalQuestions} (${(successRate * 100).toFixed(1)}%)`);
            
            if (isExamPassed) {
              // –≠–∫–∑–∞–º–µ–Ω —Å–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ
              lobbyExamState.delete(lobbyId);
              
              // –û–±–Ω—É–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Å–¥–∞—á–∏ —ç–∫–∑–∞–º–µ–Ω–∞
              incorrectAnswersMap.set(lobbyId, 0);
              console.log(`üéØ [SOCKET] –°—á—ë—Ç—á–∏–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –æ–±–Ω—É–ª—ë–Ω –¥–ª—è –ª–æ–±–±–∏ ${lobbyId}`);
              
              // –ù–∞—á–∏—Å–ª—è–µ–º 30 –æ—á–∫–æ–≤ –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É –≤ –ª–æ–±–±–∏ –∑–∞ —É—Å–ø–µ—à–Ω—É—é —Å–¥–∞—á—É —ç–∫–∑–∞–º–µ–Ω–∞
              try {
                const { User, UserSession } = require("../../db/models");
                const rewardPoints = 30;
                
                // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –ª–æ–±–±–∏
                const allSessions = await UserSession.findAll({ 
                  where: { game_session_id: lobbyId } 
                });
                
                // –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É
                for (const session of allSessions) {
                  const user = await User.findByPk(session.user_id);
                  if (user) {
                    user.score = Number(user.score || 0) + rewardPoints;
                    await user.save();
                  }
                  
                  session.score = Number(session.score || 0) + rewardPoints;
                  await session.save();
                }
                
                // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π —Å—á—ë—Ç –ª–æ–±–±–∏
                const updatedSessions = await UserSession.findAll({ 
                  where: { game_session_id: lobbyId } 
                });
                const lobbyTotalScore = updatedSessions.reduce((sum, s) => sum + Number(s.score || 0), 0);
                
                // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                const userScores = [];
                for (const session of updatedSessions) {
                  const user = await User.findByPk(session.user_id);
                  if (user) {
                    console.log(`üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${session.user_id}: session.score=${session.score}, user.score=${user.score}`);
                    userScores.push({
                      userId: session.user_id,
                      userScore: user.score
                    });
                  }
                }
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ—á–∫–∏ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
                nsp.to(roomKey).emit('lobby:examReward', {
                  message: 'üéâ –≠–∫–∑–∞–º–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–¥–∞–Ω! –ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∏–ª +30 –æ—á–∫–æ–≤!',
                  rewardPoints,
                  sessionScore: lobbyTotalScore,
                  userScores: userScores
                });
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–æ–±–Ω—É–ª—è–µ–º –ø–æ—Å–ª–µ —ç–∫–∑–∞–º–µ–Ω–∞)
                nsp.to(roomKey).emit('lobby:incorrectCountUpdate', { incorrectAnswers: 0 });
                
              } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –æ—á–∫–æ–≤ –∑–∞ —ç–∫–∑–∞–º–µ–Ω:', error);
              }
              
              // –û–±–Ω–æ–≤–∏–º —Ç–æ—á–∫—É —ç–∫–∑–∞–º–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∏ –∏–∑–≤–µ—Å—Ç–∏–º –≤—Å–µ—Ö
              const points = lobbyPoints.get(lobbyId);
              if (points) {
                const examKey = state.examId === 'exam2' ? 'exam2' : 'exam';
                const examPoint = points.find((p) => p.id === examKey);
                if (examPoint) examPoint.status = 'completed';
                if (examKey === 'exam') {
                  // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Ç–µ–º—ã —Ñ–∞–∑—ã 2 —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —ç–∫–∑–∞–º–µ–Ω–∞
                  points.forEach(p => {
                    if (p.phase_id === 2 && p.id !== 'exam2' && p.status === 'locked') {
                      p.status = 'available';
                    }
                  });
                }
              }
              const examKey = state.examId === 'exam2' ? 'exam2' : 'exam';
              nsp.to(roomKey).emit('lobby:updatePointStatus', { pointId: examKey, status: 'completed' });
              // –†–∞–∑–æ—Å–ª–∞—Ç—å –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã –ø–æ —Ñ–∞–∑–µ 2
              const updatedPoints = lobbyPoints.get(lobbyId) || [];
              updatedPoints.forEach(p => {
                if (p.phase_id === 2 && p.id !== 'exam2') {
                  nsp.to(roomKey).emit('lobby:updatePointStatus', { pointId: p.id, status: p.status });
                }
              });
              nsp.to(roomKey).emit('lobby:examComplete');
              // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–∫—Ä–æ–µ–º –ª—é–±—ã–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –º–æ–¥–∞–ª–∫–∏
              nsp.to(roomKey).emit('lobby:closeModal');
            } else {
              // –≠–∫–∑–∞–º–µ–Ω –ø—Ä–æ–≤–∞–ª–µ–Ω - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∞–∑—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
              console.log(`‚ùå [EXAM] –≠–∫–∑–∞–º–µ–Ω –ø—Ä–æ–≤–∞–ª–µ–Ω! –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∞–∑—É ${state.examId} –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è`);
              lobbyExamState.delete(lobbyId);
              
              // –û–±–Ω—É–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø—Ä–∏ –ø—Ä–æ–≤–∞–ª–µ —ç–∫–∑–∞–º–µ–Ω–∞
              incorrectAnswersMap.set(lobbyId, 0);
              console.log(`üéØ [SOCKET] –°—á—ë—Ç—á–∏–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –æ–±–Ω—É–ª—ë–Ω –ø—Ä–∏ –ø—Ä–æ–≤–∞–ª–µ —ç–∫–∑–∞–º–µ–Ω–∞ –¥–ª—è –ª–æ–±–±–∏ ${lobbyId}`);
              
              // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∞–∑—É - –¥–µ–ª–∞–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
              const points = lobbyPoints.get(lobbyId);
              if (points) {
                const currentPhaseId = state.examId === 'exam2' ? 2 : 1;
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–¥–æ—Å—Ç—É–ø–Ω–æ" –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
                points.forEach(p => {
                  if (p.phase_id === currentPhaseId) {
                    p.status = 'available';
                  }
                });
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —Ç–æ—á–µ–∫ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞—Ö
                points.forEach(p => {
                  if (p.phase_id === currentPhaseId) {
                    nsp.to(roomKey).emit('lobby:updatePointStatus', { pointId: p.id, status: p.status });
                  }
                });
              }
              
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–∞–ª–µ —ç–∫–∑–∞–º–µ–Ω–∞
              nsp.to(roomKey).emit('lobby:examFailed', {
                message: `‚ùå –≠–∫–∑–∞–º–µ–Ω –ø—Ä–æ–≤–∞–ª–µ–Ω! –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${state.correctAnswers}/${state.totalQuestions} (${(successRate * 100).toFixed(1)}%). –§–∞–∑–∞ ${state.examId === 'exam2' ? '2' : '1'} —Å–±—Ä–æ—à–µ–Ω–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è.`,
                correctAnswers: state.correctAnswers,
                totalQuestions: state.totalQuestions,
                successRate: successRate,
                phaseId: state.examId === 'exam2' ? 2 : 1
              });
              
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–æ–±–Ω—É–ª—è–µ–º –ø—Ä–∏ –ø—Ä–æ–≤–∞–ª–µ)
              nsp.to(roomKey).emit('lobby:incorrectCountUpdate', { incorrectAnswers: 0 });
              
              // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É —ç–∫–∑–∞–º–µ–Ω–∞
              nsp.to(roomKey).emit('lobby:closeExamModal');
            }
          }
          
          // –ü–µ—Ä–µ–¥–∞–µ–º —Ö–æ–¥ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
          await passTurnToNextPlayer();
        }
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –≤ lobby:examAnswer:', err);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    socket.on('lobby:favoriteToggle', async (payload) => {
      try {
        console.log('‚≠ê [FAVORITE] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', payload);
        
        const { questionId, isFavorite } = payload;
        const userId = socket.user.id;
        const username = socket.user.username;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
        const question = await db.Question.findByPk(questionId);
        if (!question) {
          socket.emit('error', { message: '–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
          return;
        }

        if (isFavorite) {
          // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
          try {
            await db.UserFavoriteQuestion.create({
              user_id: userId,
              question_id: questionId
            });
            console.log(`‚úÖ –í–æ–ø—Ä–æ—Å ${questionId} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${username}`);
          } catch (error) {
            if (error.name === 'SequelizeUniqueConstraintError') {
              console.log(`‚ÑπÔ∏è –í–æ–ø—Ä–æ—Å ${questionId} —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username}`);
            } else {
              throw error;
            }
          }
        } else {
          // –£–¥–∞–ª—è–µ–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
          await db.UserFavoriteQuestion.destroy({
            where: {
              user_id: userId,
              question_id: questionId
            }
          });
          console.log(`‚ùå –í–æ–ø—Ä–æ—Å ${questionId} —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${username}`);
        }

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –ª–æ–±–±–∏ –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        const eventPayload = {
          userId,
          questionId,
          isFavorite,
          username
        };
        
        nsp.to(roomKey).emit('lobby:favoriteToggled', eventPayload);
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error);
        socket.emit('error', { message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' });
      }
    });


    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    socket.on('disconnect', async (reason) => {
      console.log(`–°–æ–∫–µ—Ç –æ—Ç–∫–ª—é—á—ë–Ω: ${socket.id}, reason=${reason}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –æ—Ç–∫–ª—é—á–∏–≤—à–∏–π—Å—è –∏–≥—Ä–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã–º
      const wasActive = await db.UserSession.findOne({
        where: {
          game_session_id: lobbyId,
          user_id: socket.user.id,
          is_user_active: true,
        },
      });

      // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–∞–º—è—Ç–∏
      if (lobbyUsers.has(lobbyId)) {
        lobbyUsers.get(lobbyId).delete(socket.id);
        await emitUsersList();
      }

      // –ï—Å–ª–∏ –æ—Ç–∫–ª—é—á–∏–ª—Å—è –∞–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫ - –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–∂–∏–¥–∞–Ω–∏—è
      if (wasActive) {
        console.log(`‚ö†Ô∏è [RECONNECT] –ê–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫ ${socket.user.username} –æ—Ç–∫–ª—é—á–∏–ª—Å—è`);
        startReconnectTimer(socket.user.id, socket.user.username);
      }

      // –ï—Å–ª–∏ –ª–æ–±–±–∏ –ø—É—Å—Ç–æ–µ ‚Äî —Å—Ç–∞–≤–∏–º —Ç–∞–π–º–µ—Ä –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
      if (lobbyUsers.has(lobbyId) && lobbyUsers.get(lobbyId).size === 0) {
        const timeoutId = setTimeout(() => {
          lobbyPoints.delete(lobbyId);
          lobbyTimeouts.delete(lobbyId);
          lobbyReconnectTimers.delete(lobbyId);
        }, 5 * 60 * 1000);
        lobbyTimeouts.set(lobbyId, timeoutId);
      }
    });
  });
}

module.exports = initLobbySockets;