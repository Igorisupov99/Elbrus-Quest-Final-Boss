const { GameSession } = require('../../db/models');

class RoomController {
  // –æ—Ç–¥–∞—Ç—å –ø–µ—Ä–µ—á–µ–Ω—å –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç
  async getAllRooms(req, res) {
    try {
      const data = await GameSession.findAll();
      res.status(200).json({ message: 'success', data });
      return;
    } catch (error) {
      console.log('–æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ', error);
      res.status(500).json(error);
      return;
    }
  }
  // —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É
  async createRoom(req, res) {
    try {
      const {
        phase_id,
        current_topic_id,
        current_question_id,
        room_code,
        is_active,
        room_name,
      } = req.body;

      if (
        !phase_id ||
        !current_topic_id ||
        !current_question_id ||
        !is_active ||
        !room_name
      ) {
        return res
          .status(400)
          .send('–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø–µ—Ä–µ–¥–∞–Ω—ã —Å –∫–ª–∏–µ–Ω—Ç–∞');
      }

      // –±–µ—Ä–µ–º id –∏–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const room_creator = req.user.id;

      const room = await GameSession.create({
        phase_id,
        current_topic_id,
        current_question_id,
        room_code,
        is_active,
        room_name,
        room_creator,
      });

      // Emit room creation event to all connected clients
      console.log('üè† Room created, attempting to emit socket event...');
      if (global.emitRoomUpdate && global.io) {
        console.log('‚úÖ Socket functions available, emitting...');
        global.emitRoomUpdate(global.io, 'created', {
          id: room.id,
          title: room.room_name,
          room_creator: room.room_creator,
          room_code: room.room_code,
        });
      } else {
        console.log('‚ùå Socket functions not available:', {
          emitRoomUpdate: !!global.emitRoomUpdate,
          io: !!global.io,
        });
      }

      res.status(201).json({ message: 'success', data: room });
    } catch (error) {
      console.log('–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', error);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error });
    }
  }

  // –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã

  async changeRoomName(req, res) {
    try {
      const { id } = req.params;
      const { room_name } = req.body;
      const currentUserId = req.user.id;

      if (!room_name) {
        return res.status(400).json({ message: '–ü–æ–ª–µ room_name –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
      }

      const room = await GameSession.findByPk(id);

      if (!room) {
        return res
          .status(404)
          .json({ message: '–ö–æ–º–Ω–∞—Ç–∞ —Å —Ç–∞–∫–∏–º id –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
      }

      if (room.room_creator !== currentUserId) {
        return res.status(403).json({
          message: '–ò–∑–º–µ–Ω—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –µ—ë —Å–æ–∑–¥–∞—Ç–µ–ª—å',
        });
      }

      room.room_name = room_name;
      await room.save();

      // Emit room update event to all connected clients
      console.log('‚úèÔ∏è Room updated, attempting to emit socket event...');
      if (global.emitRoomUpdate && global.io) {
        console.log('‚úÖ Socket functions available, emitting...');
        global.emitRoomUpdate(global.io, 'updated', {
          id: room.id,
          title: room.room_name,
          room_creator: room.room_creator,
          room_code: room.room_code,
        });
      } else {
        console.log('‚ùå Socket functions not available:', {
          emitRoomUpdate: !!global.emitRoomUpdate,
          io: !!global.io,
        });
      }

      res.status(200).json({ message: 'success', data: room });
    } catch (error) {
      console.log('–æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ', error);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
    }
  }

  // —É–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É
  async deleteRoom(req, res) {
    try {
      const { id } = req.params;
      const currentUserId = req.user.id;

      const room = await GameSession.findByPk(id);

      if (!room) {
        return res.status(404).json({ message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
      }

      if (room.room_creator !== currentUserId) {
        return res
          .status(403)
          .json({ message: '–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã' });
      }

      // Store room data before deletion for socket emission
      const roomData = {
        id: room.id,
        title: room.room_name,
        room_creator: room.room_creator,
      };

      await room.destroy();

      // Emit room deletion event to all connected clients
      console.log('üóëÔ∏è Room deleted, attempting to emit socket event...');
      if (global.emitRoomUpdate && global.io) {
        console.log('‚úÖ Socket functions available, emitting...');
        global.emitRoomUpdate(global.io, 'deleted', roomData);
      } else {
        console.log('‚ùå Socket functions not available:', {
          emitRoomUpdate: !!global.emitRoomUpdate,
          io: !!global.io,
        });
      }

      res.status(200).json({ message: '–ö–æ–º–Ω–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞' });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', error);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
    }
  }
  //–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞—â–∏—â–µ–Ω–∞ –ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –ø–∞—Ä–æ–ª–µ–º (–Ω—É–∂–Ω–∞ –ª–∏ –º–æ–¥–∞–ª–∫–∞)
  async checkAccess(req, res) {
    try {
      const { id } = req.params;
      const room = await GameSession.findByPk(id, {
        attributes: ['id', 'room_name', 'room_code', 'is_active'],
      });

      if (!room) {
        return res
          .status(404)
          .json({ success: false, message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
      }

      const requiresPassword = !!room.room_code; // null/'' -> false, –∏–Ω–∞—á–µ true
      return res.status(200).json({
        success: true,
        data: { roomId: room.id, requiresPassword },
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ checkAccess:', error);
      return res
        .status(500)
        .json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  }
  // 2) (–Ω–∞ –ø–æ—Ç–æ–º) –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
  async verifyRoomCode(req, res) {
    try {
      const { id } = req.params;
      const { code } = req.body; // { code: '...' }

      const room = await GameSession.findByPk(id, {
        attributes: ['id', 'room_code'],
      });

      if (!room) {
        return res
          .status(404)
          .json({ success: false, message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
      }

      if (!room.room_code) {
        return res
          .status(200)
          .json({ success: true, message: '–ü–∞—Ä–æ–ª—å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è' });
      }

      if (String(code) === String(room.room_code)) {
        return res
          .status(200)
          .json({ success: true, message: '–ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π' });
      }

      return res
        .status(403)
        .json({ success: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ verifyRoomCode:', error);
      return res
        .status(500)
        .json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∫–æ–º–Ω–∞—Ç—ã

  async checkCreator(req, res) {
    try {
      const currentUserId = req.user.id;

      const rooms = await GameSession.findAll({
        where: { room_creator: currentUserId },
        attributes: ['id', 'room_name', 'room_creator'],
      });

      return res.status(200).json({
        success: true,
        data: rooms,
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ getUserRooms:', error);
      return res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      });
    }
  }
}

module.exports = new RoomController();
