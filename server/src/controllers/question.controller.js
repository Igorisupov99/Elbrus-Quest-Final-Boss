const { Phase, Topic, Question, User, UserSession } = require("../../db/models");
const achievementController = require("./achievement.controller");

// üëá —Ç–µ–ø–µ—Ä—å –∫–ª—é—á = lobbyId, –∞ –Ω–µ userId_lobbyId
const incorrectAnswersMap = new Map();

class QuestionController {
  // –û–¢–î–ê–¢–¨ –¢–ï–ö–°–¢ –í–û–ü–†–û–°–ê
  async getQuestion(req, res) {
    try {
      const phaseIdRaw = req.query.phase_id;
      const topicIdRaw = req.query.topic_id;

      const phaseId = phaseIdRaw ? Number(phaseIdRaw) : NaN;
      const topicId = topicIdRaw ? Number(topicIdRaw) : NaN;

      if (!phaseIdRaw || !topicIdRaw || Number.isNaN(phaseId) || Number.isNaN(topicId)) {
        return res.status(400).json({ error: "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã phase_id –∏ topic_id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏" });
      }

      if (!Number.isInteger(phaseId) || phaseId <= 0 || !Number.isInteger(topicId) || topicId <= 0) {
        return res.status(400).json({ error: "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏" });
      }

      const phase = await Phase.findByPk(phaseId, { attributes: ["id"] });
      if (!phase) {
        return res.status(404).json({ error: "–§–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
      }

      const topic = await Topic.findOne({
        where: { id: topicId },
        attributes: ["id", "phase_id", "title"],
      });

      if (!topic) {
        return res.status(404).json({ error: "–¢–æ–ø–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      if (Number(topic.phase_id) !== phaseId) {
        return res.status(400).json({ error: "–¢–æ–ø–∏–∫ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ñ–∞–∑–µ" });
      }

      const questionsCount = await Question.count({ where: { topic_id: topicId } });
      if (questionsCount === 0) {
        return res.status(404).json({ error: "–í –¥–∞–Ω–Ω–æ–º —Ç–æ–ø–∏–∫–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤" });
      }

      const randomOffset = Math.floor(Math.random() * questionsCount);
      const randomQuestion = await Question.findOne({
        where: { topic_id: topicId },
        attributes: ["question_text", "id", "mentor_tip"],
        order: [["id", "ASC"]],
        offset: randomOffset,
        limit: 1,
      });

      if (!randomQuestion) {
        return res.status(500).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å" });
      }

      return res.json({
        question_text: randomQuestion.question_text,
        question_id: randomQuestion.id,
        topic_title: topic.title,
        mentor_tip: randomQuestion.mentor_tip,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:", error);
      return res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  }

  // –ü–†–û–í–ï–†–ö–ê –ö–û–†–†–ï–ö–¢–ù–û–°–¢–ò –û–¢–í–ï–¢–ê
  async answerCheck(req, res) {
    try {
      const { question_id, answer, lobby_id } = req.body;
      const userId = req.user.id;
      const io = req.io;

      if (!question_id) {
        return res.status(400).json({ error: "–ü–∞—Ä–∞–º–µ—Ç—Ä question_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
      }

      const question = await Question.findByPk(question_id, {
        attributes: ["correct_answer", "question_text"],
      });

      if (!question) {
        return res.status(404).json({ error: "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      const normalizedClientAnswer = answer.trim().toLowerCase();
      const normalizedCorrectAnswer = question.correct_answer.trim().toLowerCase();
      const isCorrect = normalizedClientAnswer === normalizedCorrectAnswer;

      let updatedUser = null;
      let updatedSession = null;
      let lobbyTotalScore = 0;
      let incorrectAnswersCount = 0;

      if (isCorrect) {
        const points = 10;

        updatedUser = await User.findByPk(userId);
        if (updatedUser) {
          updatedUser.score = Number(updatedUser.score || 0) + points;
          await updatedUser.save();
        }

        if (lobby_id) {
          // –í–µ—Ä–Ω—ë–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ª–æ–±–±–∏,
          // —á—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–ª—É—á–∞–ª 0 –∏ –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–ª –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          incorrectAnswersCount = incorrectAnswersMap.get(lobby_id) || 0;
          updatedSession = await UserSession.findOne({
            where: { user_id: userId, game_session_id: lobby_id },
          });
          if (updatedSession) {
            updatedSession.score = Number(updatedSession.score || 0) + points;
            await updatedSession.save();
          }
          // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π —Å—á—ë—Ç –ª–æ–±–±–∏
          const allSessions = await UserSession.findAll({ where: { game_session_id: lobby_id } });
          lobbyTotalScore = allSessions.reduce((sum, s) => sum + Number(s.score || 0), 0);
        }

        
      } else {
        // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - –≤—ã—á–∏—Ç–∞–µ–º –±–∞–ª–ª—ã
        const penaltyPoints = 5; // –®—Ç—Ä–∞—Ñ –∑–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        
        updatedUser = await User.findByPk(userId);
        if (updatedUser) {
          updatedUser.score = Math.max(0, Number(updatedUser.score || 0) - penaltyPoints);
          await updatedUser.save();
        }

        if (lobby_id) {
          // üëá —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±—â–∏–π —Å—á—ë—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ª–æ–±–±–∏
          const current = incorrectAnswersMap.get(lobby_id) || 0;
          incorrectAnswersCount = current + 1;
          incorrectAnswersMap.set(lobby_id, incorrectAnswersCount);
          
          // –í—ã—á–∏—Ç–∞–µ–º –±–∞–ª–ª—ã –∏–∑ —Å–µ—Å—Å–∏–∏ –ª–æ–±–±–∏
          updatedSession = await UserSession.findOne({
            where: { user_id: userId, game_session_id: lobby_id },
          });
          if (updatedSession) {
            updatedSession.score = Math.max(0, Number(updatedSession.score || 0) - penaltyPoints);
            await updatedSession.save();
          }
          // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π —Å—á—ë—Ç –ª–æ–±–±–∏
          const allSessions = await UserSession.findAll({ where: { game_session_id: lobby_id } });
          lobbyTotalScore = allSessions.reduce((sum, s) => sum + Number(s.score || 0), 0);
        }
      }

      if (lobby_id) {
        const roomName = `lobby:${lobby_id}`;

        if (updatedUser && updatedSession) {
          io.of("/lobby").to(roomName).emit("lobby:scores", {
            userId,
            userScore: updatedUser.score,
            sessionScore: lobbyTotalScore,
          });
          // –®–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
          io.of("/lobby").to(roomName).emit("lobby:correctAnswer", {
            userId,
            message: "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! (+10 –æ—á–∫–æ–≤)",
          });
          console.log("EMIT lobby:scores", {
            userId,
            userScore: updatedUser.score,
            sessionScore: lobbyTotalScore,
          });
        }

        if (!isCorrect) {
          io.of("/lobby").to(roomName).emit("lobby:incorrectAnswer", {
            userId,
            userScore: updatedUser?.score || 0,
            sessionScore: lobbyTotalScore,
            incorrectAnswers: incorrectAnswersCount, // –æ–±—â–∏–π —Å—á—ë—Ç—á–∏–∫ –ø–æ –ª–æ–±–±–∏
            correctAnswer: question.correct_answer, // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            message: `‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! (-5 –æ—á–∫–æ–≤)`,
          });
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—á–∫–æ–≤
      try {
        let newAchievements = [];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userAchievements = await achievementController.checkUserAchievements(userId, lobby_id);
        newAchievements.push(...userAchievements);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –ª–æ–±–±–∏)
        if (lobby_id) {
          const sessionAchievements = await achievementController.checkSessionAchievements(userId, lobby_id);
          newAchievements.push(...sessionAchievements);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏" –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        if (isCorrect) {
          const firstStepsAchievement = await achievementController.awardAchievement(userId, 'first_steps', lobby_id);
          if (firstStepsAchievement) newAchievements.push(firstStepsAchievement);
        }
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –∫–ª–∏–µ–Ω—Ç—É
        if (newAchievements.length > 0 && lobby_id) {
          const roomName = `lobby:${lobby_id}`;
          io.of("/lobby").to(roomName).emit("lobby:newAchievements", {
            userId,
            achievements: newAchievements
          });
        }
      } catch (achievementError) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:", achievementError);
      }

      return res.json({
        correct: isCorrect,
        correctAnswer: question.correct_answer, // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        scores: {
          userScore: updatedUser?.score || 0,
          sessionScore: lobbyTotalScore,
          incorrectAnswers: incorrectAnswersCount,
        },
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:", error);
      return res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  }
}

const questionController = new QuestionController();

module.exports = {
  questionController,
  incorrectAnswersMap,
};
