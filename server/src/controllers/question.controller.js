const { Phase, Topic, Question, User, UserSession } = require("../../db/models");

// üëá —Ç–µ–ø–µ—Ä—å –∫–ª—é—á = lobbyId, –∞ –Ω–µ userId_lobbyId
const incorrectAnswersMap = new Map();

class QuestionController {
  // –û–¢–î–ê–¢–¨ –¢–ï–ö–°–¢ –í–û–ü–†–û–°–ê
  async getQuestion(req, res) {
    try {
      const phaseIdRaw = req.query.phase_id;
      const topicIdRaw = req.query.topic_id;

      const phaseId = phaseIdRaw ? Number(phaseIdRaw) : NaN;
      const topicId = topicIdRaw ? Number(topicIdRaw) : NaN;

      if (!phaseIdRaw || !topicIdRaw || Number.isNaN(phaseId) || Number.isNaN(topicId)) {
        return res.status(400).json({ error: "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã phase_id –∏ topic_id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏" });
      }

      if (!Number.isInteger(phaseId) || phaseId <= 0 || !Number.isInteger(topicId) || topicId <= 0) {
        return res.status(400).json({ error: "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏" });
      }

      const phase = await Phase.findByPk(phaseId, { attributes: ["id"] });
      if (!phase) {
        return res.status(404).json({ error: "–§–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
      }

      const topic = await Topic.findOne({
        where: { id: topicId },
        attributes: ["id", "phase_id", "title"],
      });

      if (!topic) {
        return res.status(404).json({ error: "–¢–æ–ø–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      if (Number(topic.phase_id) !== phaseId) {
        return res.status(400).json({ error: "–¢–æ–ø–∏–∫ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ñ–∞–∑–µ" });
      }

      const questionsCount = await Question.count({ where: { topic_id: topicId } });
      if (questionsCount === 0) {
        return res.status(404).json({ error: "–í –¥–∞–Ω–Ω–æ–º —Ç–æ–ø–∏–∫–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤" });
      }

      const randomOffset = Math.floor(Math.random() * questionsCount);
      const randomQuestion = await Question.findOne({
        where: { topic_id: topicId },
        attributes: ["question_text", "id"],
        order: [["id", "ASC"]],
        offset: randomOffset,
        limit: 1,
      });

      if (!randomQuestion) {
        return res.status(500).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å" });
      }

      return res.json({
        question_text: randomQuestion.question_text,
        question_id: randomQuestion.id,
        topic_title: topic.title,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:", error);
      return res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  }

  // –ü–†–û–í–ï–†–ö–ê –ö–û–†–†–ï–ö–¢–ù–û–°–¢–ò –û–¢–í–ï–¢–ê
  async answerCheck(req, res) {
    try {
      const { question_id, answer, lobby_id } = req.body;
      const userId = req.user.id;
      const io = req.io;

      if (!question_id || !answer) {
        return res.status(400).json({ error: "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã question_id –∏ answer –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
      }

      const question = await Question.findByPk(question_id, {
        attributes: ["correct_answer"],
      });

      if (!question) {
        return res.status(404).json({ error: "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      const normalizedClientAnswer = answer.trim().toLowerCase();
      const normalizedCorrectAnswer = question.correct_answer.trim().toLowerCase();
      const isCorrect = normalizedClientAnswer === normalizedCorrectAnswer;

      let updatedUser = null;
      let updatedSession = null;
      let incorrectAnswersCount = 0;

      if (isCorrect) {
        const points = 10;

        updatedUser = await User.findByPk(userId);
        if (updatedUser) {
          updatedUser.score = Number(updatedUser.score || 0) + points;
          await updatedUser.save();
        }

        if (lobby_id) {
          updatedSession = await UserSession.findOne({
            where: { user_id: userId, game_session_id: lobby_id },
          });
          if (updatedSession) {
            updatedSession.score = Number(updatedSession.score || 0) + points;
            await updatedSession.save();
          }
        }

        
      } else if (lobby_id) {
        // üëá —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±—â–∏–π —Å—á—ë—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ª–æ–±–±–∏
        const current = incorrectAnswersMap.get(lobby_id) || 0;
        incorrectAnswersCount = current + 1;
        incorrectAnswersMap.set(lobby_id, incorrectAnswersCount);
      }

      if (lobby_id) {
        const roomName = `lobby:${lobby_id}`;

        if (updatedUser && updatedSession) {
          io.to(roomName).emit("lobby:scores", {
            userId,
            userScore: updatedUser.score,
            sessionScore: updatedSession.score,
          });
          console.log("EMIT lobby:scores", {
            userId,
            userScore: updatedUser.score,
            sessionScore: updatedSession.score,
          });
        }

        if (!isCorrect) {
          const currentUser = await User.findByPk(userId);
          const currentSession = await UserSession.findOne({
            where: { user_id: userId, game_session_id: lobby_id },
          });

          io.of("/lobby").to(roomName).emit("lobby:incorrectAnswer", {
            userId,
            userScore: currentUser?.score || 0,
            sessionScore: currentSession?.score || 0,
            incorrectAnswers: incorrectAnswersCount, // –æ–±—â–∏–π —Å—á—ë—Ç—á–∏–∫ –ø–æ –ª–æ–±–±–∏
          });
        }
      }

      return res.json({
        correct: isCorrect,
        scores: {
          userScore: updatedUser?.score || 0,
          sessionScore: updatedSession?.score || 0,
          incorrectAnswers: incorrectAnswersCount,
        },
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:", error);
      return res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  }
}

const questionController = new QuestionController();

module.exports = {
  questionController,
  incorrectAnswersMap,
};
