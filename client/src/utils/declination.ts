/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤ –≤ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
 */

/**
 * –°–∫–ª–æ–Ω—è–µ—Ç —Å–ª–æ–≤–æ "–¥—Ä—É–≥" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞
 * @param count - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–∑–µ–π
 * @returns –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É —Å–ª–æ–≤–∞ "–¥—Ä—É–≥"
 */
export function declineFriend(count: number): string {
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–∏—Ñ—Ä—É —á–∏—Å–ª–∞
  const lastDigit = count % 10;
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–µ —Ü–∏—Ñ—Ä—ã —á–∏—Å–ª–∞
  const lastTwoDigits = count % 100;

  // –ï—Å–ª–∏ —á–∏—Å–ª–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 1 (–Ω–æ –Ω–µ 11) ‚Äî "–¥—Ä—É–≥"
  if (lastDigit === 1 && lastTwoDigits !== 11) {
    return '–¥—Ä—É–≥';
  }
  
  // –ï—Å–ª–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 2, 3, 4 (–Ω–æ –Ω–µ 12‚Äì14) ‚Äî "–¥—Ä—É–≥–∞"
  if (lastDigit >= 2 && lastDigit <= 4 && (lastTwoDigits < 12 || lastTwoDigits > 14)) {
    return '–¥—Ä—É–≥–∞';
  }
  
  // –í–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö ‚Äî "–¥—Ä—É–∑–µ–π"
  return '–¥—Ä—É–∑–µ–π';
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∫–ª–æ–Ω–µ–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥—Ä—É–∑–µ–π
 * @param count - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–∑–µ–π
 * @returns —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "5 –¥—Ä—É–∑–µ–π", "1 –¥—Ä—É–≥", "3 –¥—Ä—É–≥–∞"
 */
export function getFriendsCountText(count: number): string {
  return `${count} ${declineFriend(count)}`;
}

/**
 * –¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–∫–ª–æ–Ω–µ–Ω–∏—è
 */
export function testDeclination(): void {
  const testCases = [
    { count: 0, expected: '–¥—Ä—É–∑–µ–π' },
    { count: 1, expected: '–¥—Ä—É–≥' },
    { count: 2, expected: '–¥—Ä—É–≥–∞' },
    { count: 3, expected: '–¥—Ä—É–≥–∞' },
    { count: 4, expected: '–¥—Ä—É–≥–∞' },
    { count: 5, expected: '–¥—Ä—É–∑–µ–π' },
    { count: 10, expected: '–¥—Ä—É–∑–µ–π' },
    { count: 11, expected: '–¥—Ä—É–∑–µ–π' },
    { count: 12, expected: '–¥—Ä—É–∑–µ–π' },
    { count: 13, expected: '–¥—Ä—É–∑–µ–π' },
    { count: 14, expected: '–¥—Ä—É–∑–µ–π' },
    { count: 15, expected: '–¥—Ä—É–∑–µ–π' },
    { count: 20, expected: '–¥—Ä—É–∑–µ–π' },
    { count: 21, expected: '–¥—Ä—É–≥' },
    { count: 22, expected: '–¥—Ä—É–≥–∞' },
    { count: 23, expected: '–¥—Ä—É–≥–∞' },
    { count: 24, expected: '–¥—Ä—É–≥–∞' },
    { count: 25, expected: '–¥—Ä—É–∑–µ–π' },
    { count: 101, expected: '–¥—Ä—É–≥' },
    { count: 102, expected: '–¥—Ä—É–≥–∞' },
    { count: 105, expected: '–¥—Ä—É–∑–µ–π' },
    { count: 111, expected: '–¥—Ä—É–∑–µ–π' },
    { count: 112, expected: '–¥—Ä—É–∑–µ–π' },
    { count: 121, expected: '–¥—Ä—É–≥' },
    { count: 122, expected: '–¥—Ä—É–≥–∞' },
  ];

  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ "–¥—Ä—É–≥":');
  
  let allTestsPassed = true;
  testCases.forEach(({ count, expected }) => {
    const result = declineFriend(count);
    const passed = result === expected;
    if (!passed) {
      console.error(`‚ùå –û–®–ò–ë–ö–ê: ${count} -> –æ–∂–∏–¥–∞–ª–æ—Å—å "${expected}", –ø–æ–ª—É—á–µ–Ω–æ "${result}"`);
      allTestsPassed = false;
    } else {
      console.log(`‚úÖ ${count} ${result}`);
    }
  });

  if (allTestsPassed) {
    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
  } else {
    console.error('‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏');
  }
}
