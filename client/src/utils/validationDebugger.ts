// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ IDE –∑–∞–¥–∞—á

import { ideApi } from '../api/ide/ideApi';
import type { IDETaskValidation } from '../types/ideTask';

export interface ValidationDebugInfo {
  success: boolean;
  error?: string;
  validation?: IDETaskValidation;
  requestData?: any;
  responseData?: any;
}

export const debugValidation = async (
  taskId: string,
  userCode: string,
  taskDescription: string,
  testCases: any[]
): Promise<ValidationDebugInfo> => {
  const requestData = {
    taskId,
    userCode,
    taskDescription,
    testCases
  };

  console.log('üîç –û—Ç–ª–∞–¥–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ - –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:', requestData);

  try {
    const validation = await ideApi.validateCode(
      taskId,
      userCode,
      taskDescription,
      testCases
    );

    console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', validation);

    return {
      success: true,
      validation,
      requestData
    };
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', error);

    const errorInfo = {
      success: false,
      error: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
      requestData,
      responseData: error.response?.data || null
    };

    console.log('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ:', errorInfo);

    return errorInfo;
  }
};

export const validateTestCases = (testCases: any[]): string[] => {
  const errors: string[] = [];

  if (!Array.isArray(testCases)) {
    errors.push('testCases –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
    return errors;
  }

  testCases.forEach((testCase, index) => {
    if (!testCase.input) {
      errors.push(`–¢–µ—Å—Ç ${index + 1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç input`);
    }
    if (!testCase.expectedOutput) {
      errors.push(`–¢–µ—Å—Ç ${index + 1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç expectedOutput`);
    }
    if (!testCase.description) {
      errors.push(`–¢–µ—Å—Ç ${index + 1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç description`);
    }
  });

  return errors;
};

export const validateTaskData = (taskId: string, userCode: string, taskDescription: string): string[] => {
  const errors: string[] = [];

  if (!taskId || typeof taskId !== 'string') {
    errors.push('taskId –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π');
  }

  if (!userCode || typeof userCode !== 'string') {
    errors.push('userCode –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π');
  }

  if (!taskDescription || typeof taskDescription !== 'string') {
    errors.push('taskDescription –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π');
  }

  return errors;
};
