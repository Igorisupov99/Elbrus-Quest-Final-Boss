import { useState, useEffect, useRef } from "react";
import { Button } from "../../Button/Button";
import { FavoriteButton } from "../../FavoriteButton";
import { ConfirmCloseModal } from "../ConfirmCloseModal/ConfirmCloseModal";
import styles from "./QuestionModal.module.css";
import api from "../../../../api/axios";
import { socketClient } from "../../../../socket/socketLobbyPage";

const AI_QUESTION_COST = 100; // –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ –∫ AI

interface QuestionModalProps {
  isOpen: boolean;
  onClose: () => void;
  topic: string;
  question: string;
  questionId: number | null;
  lobbyId?: number;
  currentUserId: number;          // üëà id —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
  activePlayerId: number | null;  // üëà id –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
  activePlayerName: string;       // üëà –∏–º—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
  mentor_tip?: string | null;     // üëà –ø–æ–¥—Å–∫–∞–∑–∫–∞ –æ—Ç –º–µ–Ω—Ç–æ—Ä–∞
  userScore?: number;             // üëà –æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  onAnswerResult?: (
    correct: boolean,
    scores?: { userScore?: number; sessionScore?: number; incorrectAnswers?: number },
    answer?: string
  ) => void;
  onCloseModal?: () => void;
  onTimeoutClose?: () => void;
  sharedResult?: string | null;
  onAnswerSync?: (answer: string, activePlayerName: string) => void;
  syncedAnswer?: string;          // üëà —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–≤–æ–¥ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
}

export function QuestionModal({
  isOpen,
  onClose,
  topic,
  question,
  questionId,
  lobbyId,
  currentUserId,
  activePlayerId,
  activePlayerName,
  mentor_tip,
  userScore = 0,
  onAnswerResult,
  onCloseModal,
  onTimeoutClose,
  sharedResult,
  onAnswerSync,
  syncedAnswer,
}: QuestionModalProps) {
  const [answer, setAnswer] = useState("");
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState<string | null>(null);
  const [timeLeft, setTimeLeft] = useState(30);
  const [timerActive, setTimerActive] = useState(false);
  const [showHint, setShowHint] = useState(false);
  const [showConfirmClose, setShowConfirmClose] = useState(false);
  const [answerSubmitted, setAnswerSubmitted] = useState(false);
  const [aiResponse, setAiResponse] = useState<string | null>(null);
  const [aiLoading, setAiLoading] = useState(false);
  const closeTimeoutRef = useRef<number | null>(null);
  const timerResetTimeoutRef = useRef<number | null>(null);

  useEffect(() => {
    setAnswer('');
    setResult(null);
    setTimeLeft(30);
    setTimerActive(false);
    setShowHint(false);
    setShowConfirmClose(false);
    setAnswerSubmitted(false);
    setAiResponse(null);
    setAiLoading(false);
    
    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –ø—Ä–∏ —Å–º–µ–Ω–µ –≤–æ–ø—Ä–æ—Å–∞
    if (closeTimeoutRef.current) {
      clearTimeout(closeTimeoutRef.current);
      closeTimeoutRef.current = null;
    }
    if (timerResetTimeoutRef.current) {
      clearTimeout(timerResetTimeoutRef.current);
      timerResetTimeoutRef.current = null;
    }
  }, [questionId]);

  // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (closeTimeoutRef.current) {
        clearTimeout(closeTimeoutRef.current);
      }
    };
  }, []);

  // –¢–∞–π–º–µ—Ä –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
  useEffect(() => {
    if (!isOpen || !timerActive) {
      return;
    }

    const timer = setInterval(() => {
      setTimeLeft((prev) => {
        if (prev <= 1) {
          setTimerActive(false);
          // –ü—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É —É –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
          onTimeoutClose?.();
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(timer);
  }, [isOpen, timerActive]);

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∫–æ–≥–¥–∞ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è
  useEffect(() => {
    if (isOpen && !loading) {
      setTimerActive(true);
    } else {
      setTimerActive(false);
    }
  }, [isOpen, loading]);

  // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–∞–π–º–µ—Ä–∞
  useEffect(() => {
    const handleTimerReset = (event: CustomEvent) => {
      const { timeLeft } = event.detail;
      console.log('‚è∞ [QUESTION] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–∞–π–º–µ—Ä–∞:', timeLeft);
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –¥–∞—Ç—å –≤—Ä–µ–º—è –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      if (isOpen) {
        setTimeout(() => {
          console.log('‚è∞ [QUESTION] –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Ç–∞–π–º–µ—Ä–∞:', timeLeft);
          setTimeLeft(timeLeft);
          setTimerActive(true);
        }, 100); // 100–º—Å –∑–∞–¥–µ—Ä–∂–∫–∞
      }
    };

    window.addEventListener('question:timerReset', handleTimerReset as EventListener);
    
    return () => {
      window.removeEventListener('question:timerReset', handleTimerReset as EventListener);
    };
  }, [isOpen]);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
  useEffect(() => {
    if (onAnswerSync) {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ª—É—à–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–ø—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    }
  }, [onAnswerSync]);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–≤–æ–¥–∞ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
  useEffect(() => {
    if (syncedAnswer !== undefined && Number(currentUserId) !== Number(activePlayerId)) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤–≤–æ–¥ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
      setAnswer(syncedAnswer);
    }
  }, [syncedAnswer, currentUserId, activePlayerId]);

  // –°–ª—É—à–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è AI –æ—Ç–≤–µ—Ç–æ–≤
  useEffect(() => {
    const handleGlobalAIResponse = (event: CustomEvent) => {
      const payload = event.detail;
      console.log('ü§ñ [QuestionModal] –ü–æ–ª—É—á–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π AI –æ—Ç–≤–µ—Ç:', payload);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
      if (payload.questionId === questionId) {
        setAiResponse(payload.message);
        setAiLoading(false);
      }
    };

    window.addEventListener('ai:response', handleGlobalAIResponse as EventListener);
    
    return () => {
      window.removeEventListener('ai:response', handleGlobalAIResponse as EventListener);
    };
  }, [questionId]);

  if (!isOpen) return null;

  const handleAnswerChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newAnswer = e.target.value;
    setAnswer(newAnswer);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω–ø—É—Ç–∞ —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç, –µ—Å–ª–∏ —ç—Ç–æ –∞–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫
    if (Number(currentUserId) === Number(activePlayerId) && onAnswerSync) {
      onAnswerSync(newAnswer, activePlayerName);
    }
  };

  const handleSubmit = async () => {
    if (!questionId || answerSubmitted) return;

    try {
      setLoading(true);
      setResult(null);
      setAnswerSubmitted(true);

      const res = await api.post(
        "/api/question/answerCheck",
        { question_id: questionId, answer, lobby_id: lobbyId },
        { withCredentials: true }
      );

      if (res.data.correct) {
        // –ü—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –ø–µ—Ä–µ–¥–∞–µ–º –æ—á–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞, –Ω–æ –ù–ï –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä —Å—Ä–∞–∑—É
        // –¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ LobbyPage
        setResult(null);
        const s = res.data?.scores ?? {};
        onAnswerResult?.(true, {
          userScore: s.userScore ?? s.user_score ?? s.total ?? s.value,
          sessionScore: s.sessionScore ?? s.session_score ?? s.session ?? s.value,
          incorrectAnswers: s.incorrectAnswers ?? s.incorrect_answers,
        }, answer);
      } else {
        // –ü—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –ù–ï –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä - –º–æ–¥–∞–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞—Ç—å—Å—è –æ—Ç–∫—Ä—ã—Ç–æ–π –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        // –¢–∞–π–º–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –º–æ–¥–∞–ª–∫–∞ –∑–∞–∫—Ä–æ–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
        // –†–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–≤–µ—Ç–∞ (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ sharedResult)
        setAnswerSubmitted(false);
        onAnswerResult?.(false, undefined);
      }
      
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞:", err);
      setResult("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞");
      setAnswerSubmitted(false); // –†–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    } finally {
      setLoading(false);
    }
  };

  const handleClose = () => {
    // –ï—Å–ª–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if (Number(currentUserId) === Number(activePlayerId)) {
      setShowConfirmClose(true);
    } else {
      onClose();
    }
  };

  const handleConfirmClose = () => {
    setShowConfirmClose(false);
    onCloseModal?.();
  };

  const handleCancelClose = () => {
    setShowConfirmClose(false);
  };

  const handleAskAI = async () => {
    if (!lobbyId || !question) return;
    
    console.log(`ü§ñ [AI] –ó–∞–ø—Ä–æ—Å –∫ AI –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—á–∫–∞–º–∏: ${userScore}`);
    
    setAiLoading(true);
    setAiResponse(null);
    
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å AI —á–µ—Ä–µ–∑ socket
      socketClient.socket.emit('ai:question', {
        message: `–í–æ–ø—Ä–æ—Å: ${question}\n–¢–µ–º–∞: ${topic}`,
        context: '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ IT',
        questionId: questionId,
        lobbyId: lobbyId,
        cost: AI_QUESTION_COST
      });
      
      // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ AI –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç
      setTimeout(() => {
        if (aiLoading) {
          setAiResponse('AI-–º–µ–Ω—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
          setAiLoading(false);
        }
      }, 10000);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞ AI:', error);
      setAiResponse('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI-–º–µ–Ω—Ç–æ—Ä—É');
      setAiLoading(false);
    }
  };


  const isCorrectMessage = Boolean(sharedResult && sharedResult.includes('–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç'));

  return (
    <div className={styles.backdrop}>
      <div className={styles.modal}>
        {(sharedResult || result) && (
          <p className={styles.result}>{sharedResult ?? result}</p>
        )}

        {!isCorrectMessage && (
          <>
            <h2 className={styles.title}>{topic}</h2>

            {/* –°–µ–∫—Ü–∏—è –ø–æ–º–æ—â–∏ */}
            <div className={styles.helpSection}>
              <div className={styles.helpButtons}>
                {mentor_tip && (
                  <Button 
                    onClick={() => setShowHint(!showHint)}
                    className={`${styles.helpButton} ${styles.hintButton}`}
                  >
                    üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞
                  </Button>
                )}
                <Button 
                  onClick={handleAskAI}
                  disabled={aiLoading}
                  className={`${styles.helpButton} ${styles.aiButton}`}
                >
                  {aiLoading ? 'ü§ñ AI –¥—É–º–∞–µ—Ç...' : `ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å —É AI (${AI_QUESTION_COST} –æ—á–∫–æ–≤)`}
                </Button>
              </div>
              
              <div className={styles.userInfo}>
                –£ –≤–∞—Å: {userScore} –æ—á–∫–æ–≤
              </div>

              {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ */}
              {showHint && mentor_tip && (
                <div className={styles.helpContent}>
                  <div className={styles.helpContentHeader}>
                    <span className={styles.helpIcon}>üí°</span>
                    <span className={styles.helpTitle}>–ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ—Ç –º–µ–Ω—Ç–æ—Ä–∞</span>
                  </div>
                  <div className={styles.helpText}>{mentor_tip}</div>
                </div>
              )}

              {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ AI */}
              {aiResponse && (
                <div className={styles.helpContent}>
                  <div className={styles.helpContentHeader}>
                    <span className={styles.helpIcon}>ü§ñ</span>
                    <span className={styles.helpTitle}>AI-–ú–µ–Ω—Ç–æ—Ä</span>
                  </div>
                  <div className={styles.helpText}>{aiResponse}</div>
                </div>
              )}
            </div>

            {timerActive && (
              <div className={`${styles.timer} ${
                timeLeft <= 10 ? styles.timerDanger : 
                timeLeft <= 15 ? styles.timerWarning : ''
              }`}>
                <p className={styles.timerText}>
                  ‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: {timeLeft} —Å–µ–∫
                </p>
                <div className={styles.timerBar}>
                  <div 
                    className={`${styles.timerBarFill} ${
                      timeLeft <= 10 ? styles.timerBarDanger : 
                      timeLeft <= 15 ? styles.timerBarWarning : ''
                    }`}
                    style={{ width: `${(timeLeft / 30) * 100}%` }}
                  />
                </div>
              </div>
            )}

            <div className={styles.questionSection}>
              <div className={styles.questionLabel}>–í–æ–ø—Ä–æ—Å:</div>
              <p className={styles.question}>{question}</p>
            </div>

            <input
              type="text"
              className={styles.input}
              placeholder={
                Number(currentUserId) === Number(activePlayerId)
                  ? "–í–∞—à –æ—Ç–≤–µ—Ç..."
                  : `–û—Ç–≤–µ—á–∞–µ—Ç ${activePlayerName}...`
              }
              value={answer}
              onChange={handleAnswerChange}
              disabled={loading || Number(currentUserId) !== Number(activePlayerId)}
              onKeyDown={(e) => {
                if (e.key === 'Enter' && !e.shiftKey && Number(currentUserId) === Number(activePlayerId)) {
                  e.preventDefault();
                  handleSubmit();
                }
              }}
            />

            <div className={styles.actions}>
              <div className={styles.leftActions}>
                {questionId && (
                  <FavoriteButton 
                    questionId={questionId} 
                    showText={true}
                    size="medium"
                    className={styles.favoriteButton}
                  />
                )}
              </div>
              <div className={styles.rightActions}>
                <Button onClick={handleClose}>–ó–∞–∫—Ä—ã—Ç—å</Button>
                {Number(currentUserId) === Number(activePlayerId) && (
                  <Button onClick={handleSubmit} disabled={loading || answerSubmitted}>
                    {answerSubmitted ? '–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'}
                  </Button>
                )}
              </div>
            </div>
          </>
        )}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è */}
      <ConfirmCloseModal
        isOpen={showConfirmClose}
        onConfirm={handleConfirmClose}
        onCancel={handleCancelClose}
      />
    </div>
  );
}
