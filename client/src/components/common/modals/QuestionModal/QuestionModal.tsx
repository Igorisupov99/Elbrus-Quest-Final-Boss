import { useState, useEffect } from "react";
import { Button } from "../../Button/Button";
import styles from "./QuestionModal.module.css";
import api from "../../../../api/axios";

interface QuestionModalProps {
  isOpen: boolean;
  onClose: () => void;
  topic: string;
  question: string;
  questionId: number | null;
  pointId?: string;
  lobbyId?: number;
  currentUserId: number;          // üëà id —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
  activePlayerId: number | null;  // üëà id –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
  activePlayerName: string;       // üëà –∏–º—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
  onAnswerResult?: (
    correct: boolean,
    scores?: { userScore?: number; sessionScore?: number; incorrectAnswers?: number }
  ) => void;
  onLocalIncorrectAnswer?: () => void;
  onTimeout?: (pointId: string) => void;
  sharedResult?: string | null;
}

export function QuestionModal({
  isOpen,
  onClose,
  topic,
  question,
  questionId,
  pointId,
  lobbyId,
  currentUserId,
  activePlayerId,
  activePlayerName,
  onAnswerResult,
  onLocalIncorrectAnswer,
  onTimeout,
  sharedResult,
}: QuestionModalProps) {
  const [answer, setAnswer] = useState("");
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState<string | null>(null);
  const [timeLeft, setTimeLeft] = useState(30);
  const [timerActive, setTimerActive] = useState(false);

  useEffect(() => {
    setAnswer('');
    setResult(null);
    setTimeLeft(30);
    setTimerActive(false);
  }, [questionId]);

  // –¢–∞–π–º–µ—Ä –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
  useEffect(() => {
    if (!isOpen || !timerActive || Number(currentUserId) !== Number(activePlayerId)) {
      return;
    }

    const timer = setInterval(() => {
      setTimeLeft((prev) => {
        if (prev <= 1) {
          setTimerActive(false);
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
          console.log("‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç:", answer.trim() || "–ø—É—Å—Ç–æ–π");
          if (answer.trim()) {
            handleSubmit();
          } else {
            // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ timeout –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
            console.log("‚è∞ –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º timeout");
            if (pointId) {
              onTimeout?.(pointId);
              // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ
              console.log("‚è∞ –ó–∞–∫—Ä—ã–≤–∞–µ–º QuestionModal —á–µ—Ä–µ–∑ 100ms");
              setTimeout(() => {
                onClose();
              }, 100);
            } else {
              onLocalIncorrectAnswer?.();
            }
          }
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(timer);
  }, [isOpen, timerActive, currentUserId, activePlayerId, answer]);

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∫–æ–≥–¥–∞ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
  useEffect(() => {
    if (isOpen && Number(currentUserId) === Number(activePlayerId) && !loading) {
      setTimerActive(true);
    } else {
      setTimerActive(false);
    }
  }, [isOpen, currentUserId, activePlayerId, loading]);

  if (!isOpen) return null;

  const handleSubmit = async () => {
    if (!questionId) return;

    setTimerActive(false); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞

    try {
      setLoading(true);
      setResult(null);

      const res = await api.post(
        "/api/question/answerCheck",
        { question_id: questionId, answer, lobby_id: lobbyId },
        { withCredentials: true }
      );

      if (res.data.correct) {
        // –õ–æ–∫–∞–ª—å–Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç, –æ–Ω –ø—Ä–∏–¥—ë—Ç –ø–æ —Å–æ–∫–µ—Ç—É –∫–∞–∫ –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        setResult(null);
        const s = res.data?.scores ?? {};
        onAnswerResult?.(true, {
          userScore: s.userScore ?? s.user_score ?? s.total ?? s.value,
          sessionScore: s.sessionScore ?? s.session_score ?? s.session ?? s.value,
          incorrectAnswers: s.incorrectAnswers ?? s.incorrect_answers,
        });
      } else {
        // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ.
        // –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ sharedResult –∏ —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫.
        onAnswerResult?.(false);
      }
      
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞:", err);
      setResult("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞");
    } finally {
      setLoading(false);
    }
  };

  const handleClose = () => {
    setAnswer('');
    setResult(null);
    setTimerActive(false);
    setTimeLeft(30);
    
    // –ï—Å–ª–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ - —ç—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    if (Number(currentUserId) === Number(activePlayerId) && timerActive) {
      console.log("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫ –∑–∞–∫—Ä—ã–ª –º–æ–¥–∞–ª–∫—É –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ - –ª–æ–∫–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞");
      onLocalIncorrectAnswer?.();
    } else {
      onClose();
    }
  };

  const isCorrectMessage = Boolean(sharedResult && sharedResult.includes('–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç'));

  return (
    <div className={styles.backdrop}>
      <div className={styles.modal}>
        {(sharedResult || result) && (
          <p className={styles.result}>{sharedResult ?? result}</p>
        )}

        {!isCorrectMessage && (
          <>
            <h2 className={styles.title}>{topic}</h2>
            <p className={styles.question}>{question}</p>

            {Number(currentUserId) === Number(activePlayerId) && timerActive && (
              <div className={`${styles.timer} ${
                timeLeft <= 10 ? styles.timerDanger : 
                timeLeft <= 15 ? styles.timerWarning : ''
              }`}>
                <p className={styles.timerText}>
                  ‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: {timeLeft} —Å–µ–∫
                </p>
                <div className={styles.timerBar}>
                  <div 
                    className={`${styles.timerBarFill} ${
                      timeLeft <= 10 ? styles.timerBarDanger : 
                      timeLeft <= 15 ? styles.timerBarWarning : ''
                    }`}
                    style={{ width: `${(timeLeft / 30) * 100}%` }}
                  />
                </div>
              </div>
            )}

            {Number(currentUserId) === Number(activePlayerId) ? (
              <>
                <input
                  type="text"
                  className={styles.input}
                  placeholder="–í–∞—à –æ—Ç–≤–µ—Ç... (–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç = –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π)"
                  value={answer}
                  onChange={(e) => setAnswer(e.target.value)}
                  disabled={loading}
                />

                <div className={styles.actions}>
                  <Button onClick={onClose}>–ó–∞–∫—Ä—ã—Ç—å</Button>
                  <Button onClick={handleSubmit} disabled={loading}>
                    –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                  </Button>
                </div>
              </>
            ) : (
              <div className={styles.waitingBlock}>
                <p className={styles.waiting}>
                  –°–µ–π—á–∞—Å –æ—Ç–≤–µ—á–∞–µ—Ç <strong>{activePlayerName}</strong>
                </p>
                <div className={styles.actions}>
                  <Button onClick={handleClose}>–ó–∞–∫—Ä—ã—Ç—å</Button>
                </div>
              </div>
            )}
          </>
        )}
      </div>
    </div>
  );
}
