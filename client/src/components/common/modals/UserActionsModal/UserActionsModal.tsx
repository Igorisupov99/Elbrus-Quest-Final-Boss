import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import styles from './UserActionsModal.module.css';
import { getUserByUsername, checkFriendshipStatus } from '../../../../api/friendship/friendshipApi';

interface UserActionsModalProps {
  isOpen: boolean;
  onClose: () => void;
  username: string;
  onGoToProfile?: () => void;
  onAddFriend?: () => void;
}

export default function UserActionsModal({
  isOpen,
  onClose,
  username,
  //onGoToProfile,
  onAddFriend,
}: UserActionsModalProps) {
  const navigate = useNavigate();
  const [friendshipStatus, setFriendshipStatus] = useState<'none' | 'pending' | 'accepted' | 'blocked' | 'loading'>('loading');
  const [userToNavigate, setUserToNavigate] = useState<{ id: number; username: string } | null>(null);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥—Ä—É–∂–±—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  useEffect(() => {
    if (isOpen && username) {
      checkUserFriendshipStatus();
    }
  }, [isOpen, username]);

  const checkUserFriendshipStatus = async () => {
    try {
      setFriendshipStatus('loading');
      
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
      const userResponse = await getUserByUsername(username);
      
      if (userResponse.success && userResponse.data) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        setUserToNavigate({
          id: userResponse.data.id,
          username: userResponse.data.username
        });
        
        // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥—Ä—É–∂–±—ã
        const statusResponse = await checkFriendshipStatus(userResponse.data.id);
        
        if (statusResponse.success && statusResponse.data) {
          setFriendshipStatus(statusResponse.data.status);
        } else {
          setFriendshipStatus('none');
        }
      } else {
        setFriendshipStatus('none');
        setUserToNavigate(null);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –¥—Ä—É–∂–±—ã:', error);
      setFriendshipStatus('none');
      setUserToNavigate(null);
    }
  };

  if (!isOpen) return null;

  const handleGoToProfile = () => {
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (userToNavigate?.id) {
      onClose(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      navigate(`/user/${userToNavigate.id}`);
    }
  };

  const handleAddFriend = () => {
    // –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    onAddFriend?.();
    onClose();
  };

  const renderFriendshipButton = () => {
    switch (friendshipStatus) {
      case 'loading':
        return (
          <button className={styles.actionButton} disabled>
            ‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...
          </button>
        );
      case 'accepted':
        return (
          <button className={styles.actionButton} disabled>
            ‚úÖ {username} —É –≤–∞—Å –≤ –¥—Ä—É–∑—å—è—Ö
          </button>
        );
      case 'pending':
        return (
          <button className={styles.actionButton} disabled>
            ‚è≥ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
          </button>
        );
      case 'blocked':
        return (
          <button className={styles.actionButton} disabled>
            üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
          </button>
        );
      case 'none':
      default:
        return (
          <button className={styles.actionButton} onClick={handleAddFriend}>
            üë• –î–æ–±–∞–≤–∏—Ç—å –≤ –¥—Ä—É–∑—å—è
          </button>
        );
    }
  };

  return (
    <div className={styles.modalOverlay} onClick={onClose}>
      <div className={styles.modalContent} onClick={(e) => e.stopPropagation()}>
        <button className={styles.closeBtn} onClick={onClose}>
          √ó
        </button>

        <div className={styles.iconContainer}>
          <span className={styles.icon}>üë§</span>
        </div>

        <h3 className={styles.title}>{username}</h3>
        <p className={styles.message}>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</p>

        <div className={styles.actionButtons}>
          <button className={styles.actionButton} onClick={handleGoToProfile}>
            üë§ –ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å
          </button>
          {renderFriendshipButton()}
        </div>

        <button className={styles.cancelButton} onClick={onClose}>
          –ó–∞–∫—Ä—ã—Ç—å
        </button>
      </div>

    </div>
  );
}
