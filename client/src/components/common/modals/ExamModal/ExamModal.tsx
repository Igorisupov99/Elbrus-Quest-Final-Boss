import { useState, useEffect } from "react";
import { Button } from "../../Button/Button";
import { ConfirmCloseExamModal } from "../ConfirmCloseExamModal/ConfirmCloseExamModal";
import styles from "./ExamModal.module.css";
import api from "../../../../api/axios";
import { useAppSelector } from "../../../../store/hooks";

interface ExamQuestion {
  id: number;
  question_text: string;
  topic_title: string;
  phase_id?: number;
  topic_id?: number;
}

interface ExamModalProps {
  isOpen: boolean;
  onClose: () => void;
  lobbyId?: number;
  currentUserId: number;
  activePlayerId: number | null;
  activePlayerName: string;
  questions?: ExamQuestion[];
  onAdvance?: (correct: boolean, isTimeout?: boolean, answer?: string) => void;
  onTimerReset?: (timeLeft: number) => void;
  onAnswerSync?: (answer: string, activePlayerName: string) => void;
  syncedAnswer?: string;          // üëà —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–≤–æ–¥ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
  onExamFail?: () => void;        // üëà –∫–æ–ª–±—ç–∫ –¥–ª—è –ø—Ä–æ–≤–∞–ª–∞ —ç–∫–∑–∞–º–µ–Ω–∞
}

export function ExamModal({
  isOpen,
  onClose,
  lobbyId: _lobbyId,
  currentUserId,
  activePlayerId,
  activePlayerName,
  questions,
  onAdvance,
  onTimerReset,
  onAnswerSync,
  syncedAnswer,
  onExamFail,
}: ExamModalProps) {
  // –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —ç–∫–∑–∞–º–µ–Ω–∞ (—Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å) –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ —Å–æ–∫–µ—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–ø—Å—ã –Ω–µ –ø–æ–ª—É—á–∞–µ–º, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –∏–º–ø–æ—Ä—Ç –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é.
  const globalQuestions = useAppSelector(s => s.lobbyPage.examQuestions);
  const currentQuestionIndex = useAppSelector(s => s.lobbyPage.examIndex);
  const examRestoring = useAppSelector(s => s.lobbyPage.examRestoring);
  const [examQuestions, setExamQuestions] = useState<ExamQuestion[]>(questions ?? globalQuestions ?? []);
  const [answer, setAnswer] = useState("");
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState<string | null>(null);
  const [correctAnswer, setCorrectAnswer] = useState<string | null>(null);
  const [timeLeft, setTimeLeft] = useState(30);
  const [timerActive, setTimerActive] = useState(false);
  const [showConfirmClose, setShowConfirmClose] = useState(false);
  const [answerSubmitted, setAnswerSubmitted] = useState(false);
  const [hasBeenRestored, setHasBeenRestored] = useState(false); // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è

  const totalQuestions = examQuestions.length;
  const currentQuestion = examQuestions[currentQuestionIndex];

  useEffect(() => {
    if (questions && questions.length > 0) {
      setExamQuestions(questions);
    } else if (globalQuestions && globalQuestions.length > 0) {
      setExamQuestions(globalQuestions);
    }
  }, [questions, globalQuestions]);

  // –ò–Ω–¥–µ–∫—Å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ Redux (examStart/examNext). –õ–æ–∫–∞–ª—å–Ω–æ –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º.

  // –ò–Ω–¥–µ–∫—Å –±–µ—Ä—ë–º –∏–∑ Redux, –ª–æ–∫–∞–ª—å–Ω–æ –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º

  useEffect(() => {
    console.log('üîÑ [EXAM] useEffect –≤—ã–∑–≤–∞–Ω:', { 
      currentQuestionIndex, 
      isOpen, 
      examRestoring,
      hasBeenRestored,
      timeLeft: timeLeft,
      timerActive: timerActive 
    });
    
    // –ï—Å–ª–∏ —ç–∫–∑–∞–º–µ–Ω –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è, –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (examRestoring) {
      console.log('üîÑ [EXAM] –≠–∫–∑–∞–º–µ–Ω –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è, –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
      setHasBeenRestored(true); // –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ —ç–∫–∑–∞–º–µ–Ω –±—ã–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
      // –ü—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∑–¥–µ—Å—å - –æ–Ω –±—É–¥–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏–µ
      return;
    }
    
    // –ï—Å–ª–∏ —ç–∫–∑–∞–º–µ–Ω –±—ã–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Ç–µ–ø–µ—Ä—å examRestoring —Å—Ç–∞–ª false - –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (hasBeenRestored && !examRestoring) {
      console.log('üîÑ [EXAM] –≠–∫–∑–∞–º–µ–Ω –±—ã–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è');
      return;
    }
    
    console.log('üîÑ [EXAM] –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞');
    setAnswer('');
    setCorrectAnswer(null);
    setTimeLeft(30);
    setTimerActive(false);
    setAnswerSubmitted(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
    setHasBeenRestored(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    
    // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º result - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –Ω–æ–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É
    if (isOpen) {
      console.log('‚è∞ [EXAM] –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞');
      setTimerActive(true);
    }
  }, [currentQuestionIndex, isOpen, examRestoring, hasBeenRestored]);

  // –¢–∞–π–º–µ—Ä –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
  useEffect(() => {
    if (!isOpen || !timerActive) {
      return;
    }

    const timer = setInterval(() => {
      setTimeLeft((prev) => {
        if (prev <= 1) {
          setTimerActive(false);
          // –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç—ã
          if (Number(currentUserId) === Number(activePlayerId)) {
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
            console.log("‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ –≤ —ç–∫–∑–∞–º–µ–Ω–µ, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç:", answer.trim() || "–ø—É—Å—Ç–æ–π");
            if (answer.trim() && !answerSubmitted) {
              handleSubmit();
            } else {
              // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π –≤ —ç–∫–∑–∞–º–µ–Ω–µ –∏–ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚Äî —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–∫–µ—Ç–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
              console.log("‚è∞ –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –∏–ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ —ç–∫–∑–∞–º–µ–Ω–µ - —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π");
              // –û—á–∏—â–∞–µ–º –∏–Ω–ø—É—Ç –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
              setAnswer('');
              // –£–±–∏—Ä–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - –æ–Ω–æ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
              onAdvance?.(false, true); // –ü–µ—Ä–µ–¥–∞–µ–º true –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è —Ç–∞–π–º–∞—É—Ç–∞
            }
          } else {
            // –ï—Å–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫ - –ø—Ä–æ—Å—Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
            console.log("‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ —ç–∫–∑–∞–º–µ–Ω–µ");
          }
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(timer);
  }, [isOpen, timerActive, currentUserId, activePlayerId, answer]);

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∫–æ–≥–¥–∞ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
  useEffect(() => {
    console.log('‚è∞ [EXAM] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞:', { isOpen, loading, examRestoring });
    
    if (isOpen && !loading && !examRestoring) {
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç–∫–∑–∞–º–µ–Ω –ù–ï –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è
      console.log('‚è∞ [EXAM] –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª–∫–∏ (–Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ)');
      setTimerActive(true);
    } else if (!isOpen) {
      console.log('‚è∞ [EXAM] –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä - –º–æ–¥–∞–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞');
      setTimerActive(false);
    } else if (examRestoring) {
      console.log('‚è∞ [EXAM] –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä - —ç–∫–∑–∞–º–µ–Ω –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è');
    }
    // –ü—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–π–º–µ—Ä –±—É–¥–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏–µ
  }, [isOpen, loading, examRestoring]);

  // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–∞–π–º–µ—Ä–∞
  useEffect(() => {
    const handleTimerReset = (event: CustomEvent) => {
      const { timeLeft } = event.detail;
      console.log('‚è∞ [EXAM] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–∞–π–º–µ—Ä–∞:', timeLeft, 'isOpen:', isOpen, 'examRestoring:', examRestoring);
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ
      if (isOpen) {
        console.log('‚è∞ [EXAM] –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Ç–∞–π–º–µ—Ä–∞:', timeLeft);
        setTimeLeft(timeLeft);
        setTimerActive(timeLeft > 0); // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Ä–µ–º—è –±–æ–ª—å—à–µ 0
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–∫—Ä–æ–º–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞)
        if (Number(currentUserId) !== Number(activePlayerId)) {
          console.log('üîÑ [EXAM] –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–∞–π–º–µ—Ä–∞');
          setAnswer('');
          setAnswerSubmitted(false);
        } else {
          console.log('üîÑ [EXAM] –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–∞–π–º–µ—Ä–∞');
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ, –æ—Ç–º–µ—á–∞–µ–º —É—Å–ø–µ—à–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        if (examRestoring) {
          console.log('üîÑ [EXAM] –¢–∞–π–º–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —ç–∫–∑–∞–º–µ–Ω–∞');
        }
      }
    };

    window.addEventListener('exam:timerReset', handleTimerReset as EventListener);
    
    return () => {
      window.removeEventListener('exam:timerReset', handleTimerReset as EventListener);
    };
  }, [isOpen, currentUserId, activePlayerId, examRestoring]);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–∞–π–º–µ—Ä–∞ —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç—ã
  useEffect(() => {
    if (onTimerReset) {
      // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–ø—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ª—É—à–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    }
  }, [onTimerReset]);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
  useEffect(() => {
    if (onAnswerSync) {
      // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–ø—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ª—É—à–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    }
  }, [onAnswerSync]);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–≤–æ–¥–∞ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
  useEffect(() => {
    if (syncedAnswer !== undefined && Number(currentUserId) !== Number(activePlayerId)) {
      console.log('üîÑ [EXAM] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤–≤–æ–¥ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞:', syncedAnswer);
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤–≤–æ–¥ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
      setAnswer(syncedAnswer);
      setAnswerSubmitted(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    } else if (syncedAnswer !== undefined && Number(currentUserId) === Number(activePlayerId)) {
      console.log('üîÑ [EXAM] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞:', syncedAnswer);
    }
  }, [syncedAnswer, currentUserId, activePlayerId]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç—Å—è –ø–æ —Å–æ–∫–µ—Ç—É

  const handleAnswerChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newAnswer = e.target.value;
    console.log('üìù [EXAM] –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω–ø—É—Ç–∞:', { 
      newAnswer, 
      isActive: Number(currentUserId) === Number(activePlayerId),
      answerSubmitted 
    });
    setAnswer(newAnswer);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω–ø—É—Ç–∞ —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç, –µ—Å–ª–∏ —ç—Ç–æ –∞–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫
    if (Number(currentUserId) === Number(activePlayerId) && onAnswerSync) {
      console.log('üì§ [EXAM] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤–≤–æ–¥–∞:', newAnswer);
      onAnswerSync(newAnswer, activePlayerName);
    }
  };

  const handleSubmit = async () => {
    if (!currentQuestion || answerSubmitted) return;

    setTimerActive(false); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞
    setAnswerSubmitted(true); // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É

    try {
      setLoading(true);
      setResult(null);

      const res = await api.post(
        "/api/exam/examAnswerCheck",
        { 
          phase_id: currentQuestion.phase_id || 1, 
          topic_id: currentQuestion.topic_id, 
          question_id: currentQuestion.id, 
          answer 
        },
        { withCredentials: true }
      );

      if (res.data.correct) {
        console.log('‚úÖ [EXAM] –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –æ—á–∏—â–∞–µ–º –∏–Ω–ø—É—Ç. –¢–µ–∫—É—â–∏–π answer:', answer);
        // –û—á–∏—â–∞–µ–º –∏–Ω–ø—É—Ç –ø–æ—Å–ª–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        setAnswer('');
        console.log('‚úÖ [EXAM] –ò–Ω–ø—É—Ç –æ—á–∏—â–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞');
        // –£–±–∏—Ä–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - –æ–Ω–æ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —ç–∫–∑–∞–º–µ–Ω
        // –°–æ–æ–±—â–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É, —á—Ç–æ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, —á—Ç–æ–±—ã –æ–Ω –ø—Ä–æ–¥–≤–∏–Ω—É–ª –∏–Ω–¥–µ–∫—Å –∏/–∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª —ç–∫–∑–∞–º–µ–Ω
        onAdvance?.(true, false, answer);
      } else {
        console.log('‚ùå [EXAM] –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –æ—á–∏—â–∞–µ–º –∏–Ω–ø—É—Ç. –¢–µ–∫—É—â–∏–π answer:', answer);
        // –û—á–∏—â–∞–µ–º –∏–Ω–ø—É—Ç –ø–æ—Å–ª–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        setAnswer('');
        console.log('‚ùå [EXAM] –ò–Ω–ø—É—Ç –æ—á–∏—â–µ–Ω –ø–æ—Å–ª–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞');
        // –£–±–∏—Ä–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - –æ–Ω–æ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
        setCorrectAnswer(res.data.correctAnswer);
        // –ü—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –Ω–µ –ø—Ä–æ–¥–≤–∏–≥–∞–µ–º –∏–Ω–¥–µ–∫—Å, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞—ë–º —Ö–æ–¥ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
        onAdvance?.(false, false, answer);
      }
      
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞:", err);
      setResult("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
      setAnswerSubmitted(false); // –†–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
      setTimerActive(true); // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –æ—à–∏–±–∫–µ
    } finally {
      setLoading(false);
    }
  };

  const handleClose = () => {
    // –ï—Å–ª–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if (Number(currentUserId) === Number(activePlayerId)) {
      setShowConfirmClose(true);
    } else {
      // –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫ –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —É —Å–µ–±—è
      // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ hasBeenRestored, —á—Ç–æ–±—ã –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏ —ç–∫–∑–∞–º–µ–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è
      onClose();
    }
  };

  const handleConfirmClose = () => {
    setShowConfirmClose(false);
    setHasBeenRestored(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã–º –∏–≥—Ä–æ–∫–æ–º
    // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ –¥–ª—è –ø—Ä–æ–≤–∞–ª–∞ —ç–∫–∑–∞–º–µ–Ω–∞
    onExamFail?.();
  };

  const handleCancelClose = () => {
    setShowConfirmClose(false);
  };

  if (!isOpen) return null;

  const isCorrectMessage = false; // –¥–ª—è —ç–∫–∑–∞–º–µ–Ω–∞ –Ω–µ —Å–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ –æ–±—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é

  return (
    <div className={styles.backdrop}>
      <div className={styles.modal}>
        <h2 className={styles.title}>–≠–∫–∑–∞–º–µ–Ω</h2>
        
        {result && (
          <p className={styles.result}>{result}</p>
        )}

        {correctAnswer && (
          <div className={styles.correctAnswerSection}>
            <p className={styles.correctAnswerLabel}>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:</p>
            <p className={styles.correctAnswerText}>{correctAnswer}</p>
          </div>
        )}

        {!isCorrectMessage && totalQuestions > 0 && currentQuestion && (
          <>
            <div className={styles.progress}>
              <p>–û—Å—Ç–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ {totalQuestions - currentQuestionIndex} –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ {totalQuestions}</p>
            </div>

            <h3 className={styles.topic}>{currentQuestion.topic_title}</h3>
            <p className={styles.question}>{currentQuestion.question_text}</p>

            {timerActive && (
              <div className={`${styles.timer} ${
                timeLeft <= 10 ? styles.timerDanger : 
                timeLeft <= 15 ? styles.timerWarning : ''
              }`}>
                <p className={styles.timerText}>
                  ‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: {timeLeft} —Å–µ–∫
                  {Number(currentUserId) === Number(activePlayerId) ? ' (–≤–∞—à —Ö–æ–¥)' : ' (—Ö–æ–¥ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞)'}
                </p>
                <div className={styles.timerBar}>
                  <div
                    className={`${styles.timerBarFill} ${
                      timeLeft <= 10 ? styles.timerBarDanger : 
                      timeLeft <= 15 ? styles.timerBarWarning : ''
                    }`}
                    style={{ width: `${(timeLeft / 30) * 100}%` }}
                  />
                </div>
              </div>
            )}

            <input
              type="text"
              className={styles.input}
              placeholder={
                Number(currentUserId) === Number(activePlayerId)
                  ? "–í–∞—à –æ—Ç–≤–µ—Ç... (–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç = –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π)"
                  : `–û—Ç–≤–µ—á–∞–µ—Ç ${activePlayerName}...`
              }
              value={answer}
              onChange={handleAnswerChange}
              disabled={loading || answerSubmitted || Number(currentUserId) !== Number(activePlayerId)}
              onKeyDown={(e) => {
                if (e.key === 'Enter' && !e.shiftKey && Number(currentUserId) === Number(activePlayerId)) {
                  e.preventDefault();
                  handleSubmit();
                }
              }}
            />

            <div className={styles.actions}>
              <Button onClick={handleClose}>–ó–∞–∫—Ä—ã—Ç—å</Button>
              {Number(currentUserId) === Number(activePlayerId) && (
                <Button onClick={handleSubmit} disabled={loading || answerSubmitted}>
                  {answerSubmitted ? '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'}
                </Button>
              )}
            </div>
          </>
        )}

        {totalQuestions === 0 && !isCorrectMessage && (
          <div className={styles.loading}>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ —ç–∫–∑–∞–º–µ–Ω–∞...</p>
            <div className={styles.actions}>
              <Button onClick={handleClose}>–ó–∞–∫—Ä—ã—Ç—å</Button>
            </div>
          </div>
        )}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è —ç–∫–∑–∞–º–µ–Ω–∞ */}
      <ConfirmCloseExamModal
        isOpen={showConfirmClose}
        onConfirm={handleConfirmClose}
        onCancel={handleCancelClose}
      />
    </div>
  );
}
