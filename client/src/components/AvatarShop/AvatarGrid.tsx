import React, { memo } from 'react';
import { StaticAvatarCard } from './AvatarCard/StaticAvatarCard';
import type { Avatar } from '../../types/avatar';

interface AvatarCardData {
  avatar: Avatar;
  isOwned: boolean;
  isEquipped: boolean;
  canAfford: boolean;
}

interface AvatarGridProps {
  avatarCardsData: AvatarCardData[];
  userScore: number;
}

/**
 * –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–µ—Ç–∫–∞ –∞–≤–∞—Ç–∞—Ä–æ–≤
 * –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
 */
const AvatarGridComponent: React.FC<AvatarGridProps> = ({ avatarCardsData, userScore }) => {
  console.log('üé® AvatarGrid render with', avatarCardsData.length, 'cards');
  
  return (
    <div className="avatars-grid" style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(250px, 1fr))', gap: '1rem', padding: '1rem' }}>
      {avatarCardsData.map(({ avatar, isOwned, isEquipped, canAfford }) => (
        <StaticAvatarCard
          key={avatar.id}
          avatar={avatar}
          initialIsOwned={isOwned}
          initialIsEquipped={isEquipped}
          initialCanAfford={canAfford}
          userScore={userScore}
        />
      ))}
    </div>
  );
};

// –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º —Å–µ—Ç–∫—É - –æ–Ω–∞ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
export const AvatarGrid = memo(AvatarGridComponent, (prevProps, nextProps) => {
  // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–∞—Å—Å–∏–≤–∞
  if (prevProps.avatarCardsData.length !== nextProps.avatarCardsData.length) {
    return false; // –†–µ—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å
  }
  
  // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º userScore
  if (prevProps.userScore !== nextProps.userScore) {
    return false; // –†–µ—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å
  }
  
  // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç–æ—á–∫—É
  return prevProps.avatarCardsData.every((prevCard, index) => {
    const nextCard = nextProps.avatarCardsData[index];
    return (
      prevCard.avatar.id === nextCard.avatar.id &&
      prevCard.isOwned === nextCard.isOwned &&
      prevCard.isEquipped === nextCard.isEquipped &&
      prevCard.canAfford === nextCard.canAfford
    );
  });
});
