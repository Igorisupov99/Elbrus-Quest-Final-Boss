import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Provider } from 'react-redux';
import { store } from '../../../store/store';
import { OptimizedAvatarCard } from '../AvatarCard/OptimizedAvatarCard';
import type { Avatar } from '../../../types/avatar';

// –ú–æ–∫ –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const mockAvatar: Avatar = {
  id: 1,
  name: 'Test Avatar',
  description: 'Test Description',
  price: 100,
  rarity: 'common',
  category: 'animals',
  imageUrl: 'https://example.com/avatar.jpg',
  createdAt: '2024-01-01T00:00:00Z',
  updatedAt: '2024-01-01T00:00:00Z'
};

// –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ–º–æ–∏–∑–∞—Ü–∏–∏
const TestWrapper: React.FC<{ 
  avatar: Avatar; 
  isOwned: boolean; 
  isEquipped: boolean; 
  canAfford: boolean; 
  userScore: number;
}> = ({ avatar, isOwned, isEquipped, canAfford, userScore }) => {
  console.log('üîÑ TestWrapper render');
  
  return (
    <Provider store={store}>
      <OptimizedAvatarCard
        avatar={avatar}
        isOwned={isOwned}
        isEquipped={isEquipped}
        canAfford={canAfford}
        userScore={userScore}
      />
    </Provider>
  );
};

describe('AvatarShop Optimization Tests', () => {
  beforeEach(() => {
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Å–æ–ª—å –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
    jest.clearAllMocks();
  });

  test('OptimizedAvatarCard should not re-render when irrelevant props change', () => {
    const { rerender } = render(
      <TestWrapper
        avatar={mockAvatar}
        isOwned={false}
        isEquipped={false}
        canAfford={true}
        userScore={200}
      />
    );

    // –ü–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä
    expect(screen.getByText('Test Avatar')).toBeInTheDocument();

    // –ò–∑–º–µ–Ω—è–µ–º userScore (–Ω–µ –¥–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏)
    rerender(
      <TestWrapper
        avatar={mockAvatar}
        isOwned={false}
        isEquipped={false}
        canAfford={true}
        userScore={300} // –ò–∑–º–µ–Ω–∏–ª–∏ userScore
      />
    );

    // –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å—Å—è, —Ç–∞–∫ –∫–∞–∫ canAfford –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
    expect(screen.getByText('Test Avatar')).toBeInTheDocument();
  });

  test('OptimizedAvatarCard should re-render when relevant props change', () => {
    const { rerender } = render(
      <TestWrapper
        avatar={mockAvatar}
        isOwned={false}
        isEquipped={false}
        canAfford={true}
        userScore={200}
      />
    );

    // –ü–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä
    expect(screen.getByText('–ö—É–ø–∏—Ç—å –∑–∞ 100')).toBeInTheDocument();

    // –ò–∑–º–µ–Ω—è–µ–º isOwned (–¥–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä)
    rerender(
      <TestWrapper
        avatar={mockAvatar}
        isOwned={true} // –ò–∑–º–µ–Ω–∏–ª–∏ isOwned
        isEquipped={false}
        canAfford={true}
        userScore={200}
      />
    );

    // –ö–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –Ω–∞ "–ù–∞–¥–µ—Ç—å"
    expect(screen.getByText('–ù–∞–¥–µ—Ç—å')).toBeInTheDocument();
  });

  test('Button text should update correctly based on state', () => {
    const { rerender } = render(
      <TestWrapper
        avatar={mockAvatar}
        isOwned={false}
        isEquipped={false}
        canAfford={true}
        userScore={200}
      />
    );

    // –ù–µ –∫—É–ø–ª–µ–Ω - –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–Ω–æ–ø–∫–∞ "–ö—É–ø–∏—Ç—å"
    expect(screen.getByText('–ö—É–ø–∏—Ç—å –∑–∞ 100')).toBeInTheDocument();

    // –ö—É–ø–ª–µ–Ω, –Ω–æ –Ω–µ –Ω–∞–¥–µ—Ç - –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–Ω–æ–ø–∫–∞ "–ù–∞–¥–µ—Ç—å"
    rerender(
      <TestWrapper
        avatar={mockAvatar}
        isOwned={true}
        isEquipped={false}
        canAfford={true}
        userScore={200}
      />
    );
    expect(screen.getByText('–ù–∞–¥–µ—Ç—å')).toBeInTheDocument();

    // –ù–∞–¥–µ—Ç - –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–Ω–æ–ø–∫–∞ "–°–Ω—è—Ç—å"
    rerender(
      <TestWrapper
        avatar={mockAvatar}
        isOwned={true}
        isEquipped={true}
        canAfford={true}
        userScore={200}
      />
    );
    expect(screen.getByText('–°–Ω—è—Ç—å')).toBeInTheDocument();
  });
});

// –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
describe('Performance Tests', () => {
  test('Multiple cards should render efficiently', () => {
    const avatars = Array.from({ length: 10 }, (_, i) => ({
      ...mockAvatar,
      id: i + 1,
      name: `Avatar ${i + 1}`
    }));

    const startTime = performance.now();
    
    render(
      <Provider store={store}>
        {avatars.map(avatar => (
          <OptimizedAvatarCard
            key={avatar.id}
            avatar={avatar}
            isOwned={false}
            isEquipped={false}
            canAfford={true}
            userScore={1000}
          />
        ))}
      </Provider>
    );

    const endTime = performance.now();
    const renderTime = endTime - startTime;

    // –†–µ–Ω–¥–µ—Ä 10 –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—ã—Å—Ç—Ä—ã–º (–º–µ–Ω–µ–µ 100–º—Å)
    expect(renderTime).toBeLessThan(100);
    
    // –í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–æ–ª–∂–Ω—ã –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å—Å—è
    expect(screen.getAllByText(/Avatar \d+/)).toHaveLength(10);
  });
});
