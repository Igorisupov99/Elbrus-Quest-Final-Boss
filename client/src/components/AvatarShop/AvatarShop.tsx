import React, { useEffect, useState, useMemo, useCallback, memo, useRef } from 'react';
import { useAppDispatch, useAppSelector } from '../../store/hooks';
import { 
  fetchAvatars, 
  fetchUserAvatars, 
  fetchCurrentAvatar,
  clearError 
} from '../../store/avatarSlice';
import { 
  selectUserScore 
} from '../../store/avatarSelectors';
import { AvatarGrid } from './AvatarGrid';
import { ResultsHeader } from './ResultsHeader';
import { AvatarFilters } from './AvatarFilters/AvatarFilters';
import type { AvatarShopFilters } from '../../types/avatar';
import styles from './AvatarShop.module.css';

const AvatarShopComponent: React.FC = () => {
  console.log('üöÄ AvatarShop render');
  
  const dispatch = useAppDispatch();
  const loading = useAppSelector((state) => state.avatar.loading);
  const error = useAppSelector((state) => state.avatar.error);

  const [filters, setFilters] = useState<AvatarShopFilters>({});

  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    const loadData = async () => {
      await Promise.all([
        dispatch(fetchAvatars({})), // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∞–≤–∞—Ç–∞—Ä—ã –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        dispatch(fetchUserAvatars()),
        dispatch(fetchCurrentAvatar())
      ]);
    };
    loadData();
  }, [dispatch]);

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ª–∏—à–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  const serverFilters = useMemo(() => ({
    category: filters.category,
    rarity: filters.rarity,
    searchQuery: filters.searchQuery
  }), [
    filters.category,
    filters.rarity,
    filters.searchQuery
  ]);

  // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
  const [shouldApplyFilters, setShouldApplyFilters] = useState(false);

  useEffect(() => {
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –∏ –Ω—É–∂–Ω–æ –∏—Ö –ø—Ä–∏–º–µ–Ω–∏—Ç—å
    if (shouldApplyFilters) {
      dispatch(fetchAvatars(serverFilters));
      setShouldApplyFilters(false);
    }
  }, [dispatch, serverFilters, shouldApplyFilters]);

  useEffect(() => {
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      dispatch(clearError());
    };
  }, [dispatch]);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
  const userScore = useAppSelector(selectUserScore);
  
  // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Redux
  const avatars = useAppSelector((state) => state.avatar.avatars);
  const userAvatars = useAppSelector((state) => state.avatar.userAvatars);
  const currentAvatar = useAppSelector((state) => state.avatar.currentAvatar);
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º useRef –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ —Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤
  const avatarCardsDataRef = useRef<any[]>([]);
  const filteredCardsDataRef = useRef<any[]>([]);
  const isDataInitialized = useRef(false);
  
  // –í—ã—á–∏—Å–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤ –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  useEffect(() => {
    if (avatars.length > 0) {
      console.log('üîÑ Computing avatar cards data');
      const ownedAvatarIds = new Set(userAvatars.map(ua => ua.avatarId));
      const equippedAvatarId = currentAvatar?.id;
      
      avatarCardsDataRef.current = avatars.map(avatar => ({
        avatar,
        isOwned: ownedAvatarIds.has(avatar.id),
        isEquipped: equippedAvatarId === avatar.id,
        canAfford: userScore >= avatar.price,
      }));
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
      console.log('üîç Applying local filters');
      filteredCardsDataRef.current = avatarCardsDataRef.current.filter(({ isOwned }) => {
        if (filters.showOwned && !isOwned) return false;
        if (filters.showLocked && isOwned) return false;
        return true;
      });
      
      isDataInitialized.current = true;
    }
  }, [avatars, userAvatars, currentAvatar?.id, userScore, filters.showOwned, filters.showLocked]);
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  const filteredAvatarCardsData = filteredCardsDataRef.current;

  // –ù–µ –º–µ–º–æ–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ - –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ –º–µ–º–æ–∏–∑–∞—Ü–∏—é —Å–∞–º–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤

  const handleFiltersChange = useCallback((filtersUpdater: (prev: AvatarShopFilters) => AvatarShopFilters) => {
    setFilters(prevFilters => {
      const newFilters = filtersUpdater(prevFilters);
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
      const hasServerFilterChanges = 
        newFilters.category !== prevFilters.category ||
        newFilters.rarity !== prevFilters.rarity ||
        newFilters.searchQuery !== prevFilters.searchQuery;
      
      if (hasServerFilterChanges) {
        setShouldApplyFilters(true); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
      }
      
      return newFilters;
    });
  }, []);

  if (error) {
    return (
      <div className={styles.errorContainer}>
        <div className={styles.error}>
          <h2>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞</h2>
          <p>{error}</p>
          <button 
            onClick={() => {
              dispatch(clearError());
              dispatch(fetchAvatars(serverFilters));
            }}
            className={styles.retryButton}
          >
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className={styles.container}>
      <AvatarFilters
        filters={filters}
        onFiltersChange={handleFiltersChange}
        userScore={userScore}
      />

      {loading ? (
        <div className={styles.loadingContainer}>
          <div className={styles.loadingSpinner} />
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–æ–≤...</p>
        </div>
      ) : (
        <>
          <ResultsHeader 
            count={filteredAvatarCardsData.length} 
            currentAvatar={currentAvatar} 
          />

          {filteredAvatarCardsData.length === 0 ? (
            <div className={styles.emptyState}>
              <div className={styles.emptyIcon}>üé≠</div>
              <h3>–ê–≤–∞—Ç–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
              <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞</p>
            </div>
          ) : (
            <AvatarGrid avatarCardsData={filteredAvatarCardsData} userScore={userScore} />
          )}
        </>
      )}
    </div>
  );
};

// –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤
export const AvatarShop = memo(AvatarShopComponent);
