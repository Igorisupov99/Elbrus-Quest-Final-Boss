import React, { useState } from 'react';
import { debugValidation, validateTestCases, validateTaskData } from '../../utils/validationDebugger';
import type { IDETaskValidation } from '../../types/ideTask';
import styles from './ValidationTest.module.css';

const ValidationTest: React.FC = () => {
  const [isValidating, setIsValidating] = useState(false);
  const [result, setResult] = useState<IDETaskValidation | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [debugInfo, setDebugInfo] = useState<any>(null);
  const [testType, setTestType] = useState<'return' | 'console' | 'both' | 'unique' | 'string' | 'boolean' | 'object' | 'universal'>('return');

  const testValidation = async () => {
    try {
      setIsValidating(true);
      setError(null);
      setResult(null);
      setDebugInfo(null);
      
      // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      let userCode = '';
      let taskDescription = '';
      
      switch (testType) {
        case 'return':
          userCode = `
function fibonacci(n) {
  if (n <= 1) return n;
  return fibonacci(n - 1) + fibonacci(n - 2);
}

// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
fibonacci(5);
          `;
          taskDescription = '–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è n-–≥–æ —á–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏. –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —á–∏—Å–ª–æ.';
          break;
        case 'console':
          userCode = `
function fibonacci(n) {
  if (n <= 1) return n;
  return fibonacci(n - 1) + fibonacci(n - 2);
}

// –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
console.log(fibonacci(5));
          `;
          taskDescription = '–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è n-–≥–æ —á–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏. –í—ã–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Å–æ–ª—å.';
          break;
        case 'both':
          userCode = `
function fibonacci(n) {
  if (n <= 1) return n;
  return fibonacci(n - 1) + fibonacci(n - 2);
}

// –ò –≤–æ–∑–≤—Ä–∞—â–∞–µ–º, –∏ –≤—ã–≤–æ–¥–∏–º
const result = fibonacci(5);
console.log(result);
result;
          `;
          taskDescription = '–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è n-–≥–æ —á–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏. –ò –≤–µ—Ä–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∏ –≤—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å.';
          break;
        case 'unique':
          userCode = `
function findUnique(arr) {
  // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  let uniqueArray = [];

  // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
  for (let i = 0; i < arr.length; i++) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ –º–∞—Å—Å–∏–≤–µ
    if (arr.filter(item => item === arr[i]).length === 1) {
      // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –º–∞—Å—Å–∏–≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      uniqueArray.push(arr[i]);
    }
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  return uniqueArray;
}

// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
findUnique([1, 2, 3, 2, 1, 4]);
          `;
          taskDescription = '–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é findUnique, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (—ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑).';
          break;
        case 'string':
          userCode = `
function toUpperCase(str) {
  return str.toUpperCase();
}

// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
toUpperCase('hello');
          `;
          taskDescription = '–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é toUpperCase, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–µ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ.';
          break;
        case 'boolean':
          userCode = `
function isEven(num) {
  return num % 2 === 0;
}

// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
isEven(4);
          `;
          taskDescription = '–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é isEven, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ —á–∏—Å–ª–æ —á–µ—Ç–Ω–æ–µ, –∏ false, –µ—Å–ª–∏ –Ω–µ—á–µ—Ç–Ω–æ–µ.';
          break;
        case 'object':
          userCode = `
function getKeys(obj) {
  return Object.keys(obj);
}

// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
getKeys({a: 1, b: 2, c: 3});
          `;
          taskDescription = '–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é getKeys, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –µ–≥–æ –∫–ª—é—á–µ–π.';
          break;
        case 'universal':
          userCode = `
function processData(input) {
  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
  if (Array.isArray(input)) {
    return input.length;
  } else if (typeof input === 'string') {
    return input.length;
  } else if (typeof input === 'number') {
    return input * 2;
  } else if (typeof input === 'boolean') {
    return !input;
  } else if (typeof input === 'object' && input !== null) {
    return Object.keys(input).length;
  }
  return input;
}

// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
processData([1, 2, 3]);
          `;
          taskDescription = '–ù–∞–ø–∏—à–∏—Ç–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é processData, –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö: –¥–ª—è –º–∞—Å—Å–∏–≤–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏–Ω—É, –¥–ª—è —Å—Ç—Ä–æ–∫ - –¥–ª–∏–Ω—É, –¥–ª—è —á–∏—Å–µ–ª - —É–¥–≤–æ–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –¥–ª—è –±—É–ª–µ–≤—ã—Ö - –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π.';
          break;
      }

      let testCases = [];
      
      if (testType === 'unique') {
        testCases = [
          {
            input: [1, 2, 3, 2, 1, 4],
            expectedOutput: [3, 4],
            description: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ [1, 2, 3, 2, 1, 4]'
          },
          {
            input: [1, 2, 3, 4, 5],
            expectedOutput: [1, 2, 3, 4, 5],
            description: '–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã'
          },
          {
            input: [1, 1, 1, 1],
            expectedOutput: [],
            description: '–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ'
          }
        ];
      } else if (testType === 'string') {
        testCases = [
          {
            input: 'hello',
            expectedOutput: 'HELLO',
            description: '–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ hello –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä'
          },
          {
            input: 'world',
            expectedOutput: 'WORLD',
            description: '–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ world –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä'
          },
          {
            input: '',
            expectedOutput: '',
            description: '–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞'
          }
        ];
      } else if (testType === 'boolean') {
        testCases = [
          {
            input: 4,
            expectedOutput: true,
            description: '4 - —á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ'
          },
          {
            input: 7,
            expectedOutput: false,
            description: '7 - –Ω–µ—á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ'
          },
          {
            input: 0,
            expectedOutput: true,
            description: '0 - —á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ'
          }
        ];
      } else if (testType === 'object') {
        testCases = [
          {
            input: {a: 1, b: 2, c: 3},
            expectedOutput: ['a', 'b', 'c'],
            description: '–ö–ª—é—á–∏ –æ–±—ä–µ–∫—Ç–∞ {a: 1, b: 2, c: 3}'
          },
          {
            input: {x: 10, y: 20},
            expectedOutput: ['x', 'y'],
            description: '–ö–ª—é—á–∏ –æ–±—ä–µ–∫—Ç–∞ {x: 10, y: 20}'
          },
          {
            input: {},
            expectedOutput: [],
            description: '–ü—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç'
          }
        ];
      } else if (testType === 'universal') {
        testCases = [
          {
            input: [1, 2, 3],
            expectedOutput: 3,
            description: '–ú–∞—Å—Å–∏–≤ [1, 2, 3] - –¥–ª–∏–Ω–∞ 3'
          },
          {
            input: 'hello',
            expectedOutput: 5,
            description: '–°—Ç—Ä–æ–∫–∞ hello - –¥–ª–∏–Ω–∞ 5'
          },
          {
            input: 5,
            expectedOutput: 10,
            description: '–ß–∏—Å–ª–æ 5 - —É–¥–≤–æ–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 10'
          },
          {
            input: true,
            expectedOutput: false,
            description: '–ë—É–ª–µ–≤–æ true - –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ false'
          },
          {
            input: {a: 1, b: 2},
            expectedOutput: 2,
            description: '–û–±—ä–µ–∫—Ç {a: 1, b: 2} - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π 2'
          }
        ];
      } else {
        testCases = [
          {
            input: 5,
            expectedOutput: 5,
            description: 'fibonacci(5) –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 5'
          },
          {
            input: 10,
            expectedOutput: 55,
            description: 'fibonacci(10) –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 55'
          }
        ];
      }

      const testData = {
        taskId: 'test-task-123',
        userCode,
        taskDescription,
        testCases
      };

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const taskErrors = validateTaskData(testData.taskId, testData.userCode, testData.taskDescription);
      const testErrors = validateTestCases(testData.testCases);
      
      if (taskErrors.length > 0 || testErrors.length > 0) {
        const allErrors = [...taskErrors, ...testErrors];
        setError(`–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: ${allErrors.join(', ')}`);
        return;
      }

      console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ª–∞–¥–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏...');
      
      const debugResult = await debugValidation(
        testData.taskId,
        testData.userCode,
        testData.taskDescription,
        testData.testCases
      );

      setDebugInfo(debugResult);

      if (debugResult.success && debugResult.validation) {
        setResult(debugResult.validation);
      } else {
        setError(debugResult.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏');
      }
    } catch (err: any) {
      console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err);
      setError(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    } finally {
      setIsValidating(false);
    }
  };

  return (
    <div className={styles.container}>
      <h3>–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ IDE –∑–∞–¥–∞—á</h3>
      
      <div className={styles.testOptions}>
        <label className={styles.optionLabel}>
          <input
            type="radio"
            name="testType"
            value="return"
            checked={testType === 'return'}
            onChange={(e) => setTestType(e.target.value as 'return' | 'console' | 'both' | 'unique' | 'string' | 'boolean' | 'object' | 'universal')}
          />
          –¢–æ–ª—å–∫–æ –≤–æ–∑–≤—Ä–∞—Ç –∑–Ω–∞—á–µ–Ω–∏—è
        </label>
        <label className={styles.optionLabel}>
          <input
            type="radio"
            name="testType"
            value="console"
            checked={testType === 'console'}
            onChange={(e) => setTestType(e.target.value as 'return' | 'console' | 'both' | 'unique' | 'string' | 'boolean' | 'object' | 'universal')}
          />
          –¢–æ–ª—å–∫–æ console.log
        </label>
        <label className={styles.optionLabel}>
          <input
            type="radio"
            name="testType"
            value="both"
            checked={testType === 'both'}
            onChange={(e) => setTestType(e.target.value as 'return' | 'console' | 'both' | 'unique' | 'string' | 'boolean' | 'object' | 'universal')}
          />
          –ò –≤–æ–∑–≤—Ä–∞—Ç, –∏ console.log
        </label>
        <label className={styles.optionLabel}>
          <input
            type="radio"
            name="testType"
            value="unique"
            checked={testType === 'unique'}
            onChange={(e) => setTestType(e.target.value as 'return' | 'console' | 'both' | 'unique' | 'string' | 'boolean' | 'object' | 'universal')}
          />
          –§—É–Ω–∫—Ü–∏—è findUnique (–º–∞—Å—Å–∏–≤—ã)
        </label>
        <label className={styles.optionLabel}>
          <input
            type="radio"
            name="testType"
            value="string"
            checked={testType === 'string'}
            onChange={(e) => setTestType(e.target.value as 'return' | 'console' | 'both' | 'unique' | 'string' | 'boolean' | 'object' | 'universal')}
          />
          –°—Ç—Ä–æ–∫–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        </label>
        <label className={styles.optionLabel}>
          <input
            type="radio"
            name="testType"
            value="boolean"
            checked={testType === 'boolean'}
            onChange={(e) => setTestType(e.target.value as 'return' | 'console' | 'both' | 'unique' | 'string' | 'boolean' | 'object' | 'universal')}
          />
          –ë—É–ª–µ–≤—ã —Ñ—É–Ω–∫—Ü–∏–∏
        </label>
        <label className={styles.optionLabel}>
          <input
            type="radio"
            name="testType"
            value="object"
            checked={testType === 'object'}
            onChange={(e) => setTestType(e.target.value as 'return' | 'console' | 'both' | 'unique' | 'string' | 'boolean' | 'object' | 'universal')}
          />
          –§—É–Ω–∫—Ü–∏–∏ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏
        </label>
        <label className={styles.optionLabel}>
          <input
            type="radio"
            name="testType"
            value="universal"
            checked={testType === 'universal'}
            onChange={(e) => setTestType(e.target.value as 'return' | 'console' | 'both' | 'unique' | 'string' | 'boolean' | 'object' | 'universal')}
          />
          –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        </label>
      </div>
      
      <button 
        onClick={testValidation}
        disabled={isValidating}
        className={styles.testButton}
      >
        {isValidating ? '–¢–µ—Å—Ç–∏—Ä—É—é...' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏'}
      </button>

      {error && (
        <div className={styles.error}>
          <h4>–û—à–∏–±–∫–∞:</h4>
          <p>{error}</p>
        </div>
      )}

      {debugInfo && (
        <div className={styles.debugInfo}>
          <h4>–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h4>
          <div className={styles.debugItem}>
            <strong>–£—Å–ø–µ—à–Ω–æ:</strong> {debugInfo.success ? '–î–∞' : '–ù–µ—Ç'}
          </div>
          {debugInfo.error && (
            <div className={styles.debugItem}>
              <strong>–û—à–∏–±–∫–∞:</strong> {debugInfo.error}
            </div>
          )}
          {debugInfo.requestData && (
            <div className={styles.debugItem}>
              <strong>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥:</strong>
              <pre className={styles.codeBlock}>
                {debugInfo.requestData.userCode}
              </pre>
            </div>
          )}
          {debugInfo.requestData && (
            <div className={styles.debugItem}>
              <strong>–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:</strong>
              <p>{debugInfo.requestData.taskDescription}</p>
            </div>
          )}
          {debugInfo.requestData && (
            <div className={styles.debugItem}>
              <strong>–¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏:</strong>
              <pre className={styles.codeBlock}>
                {JSON.stringify(debugInfo.requestData.testCases, null, 2)}
              </pre>
            </div>
          )}
          {debugInfo.responseData && (
            <div className={styles.debugItem}>
              <strong>–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:</strong>
              <pre className={styles.codeBlock}>
                {JSON.stringify(debugInfo.responseData, null, 2)}
              </pre>
            </div>
          )}
        </div>
      )}

      {result && (
        <div className={styles.result}>
          <h4>–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏:</h4>
          <div className={styles.resultItem}>
            <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ:</strong> {result.isCorrect ? '–î–∞' : '–ù–µ—Ç'}
          </div>
          <div className={styles.resultItem}>
            <strong>–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤:</strong> {result.passedTests}/{result.totalTests}
          </div>
          
          {result.testResults && result.testResults.length > 0 && (
            <div className={styles.testResults}>
              <h5>–î–µ—Ç–∞–ª–∏ —Ç–µ—Å—Ç–æ–≤:</h5>
              {result.testResults.map((test, index) => (
                <div key={index} className={`${styles.testItem} ${test.passed ? styles.passed : styles.failed}`}>
                  <div className={styles.testStatus}>
                    {test.passed ? '‚úÖ' : '‚ùå'}
                  </div>
                  <div className={styles.testInfo}>
                    <div><strong>–¢–µ—Å—Ç {index + 1}:</strong> {test.testCase.description}</div>
                    <div><strong>–í—Ö–æ–¥:</strong> {test.testCase.input}</div>
                    <div><strong>–û–∂–∏–¥–∞–ª–æ—Å—å:</strong> {test.testCase.expectedOutput}</div>
                    {test.actualOutput && (
                      <div><strong>–ü–æ–ª—É—á–µ–Ω–æ:</strong> {test.actualOutput}</div>
                    )}
                    {test.errorMessage && (
                      <div><strong>–û—à–∏–±–∫–∞:</strong> {test.errorMessage}</div>
                    )}
                  </div>
                </div>
              ))}
            </div>
          )}

          {result.errorMessage && (
            <div className={styles.errorMessage}>
              <strong>–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:</strong> {result.errorMessage}
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default ValidationTest;
