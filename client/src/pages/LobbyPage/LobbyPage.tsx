import { useEffect, useMemo, useRef, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import styles from "./LobbyPage.module.css";
import { Button } from "../../components/common/Button/Button";
import { Point, type POIStatus } from "../../components/map/Point/Point";
import { QuestionModal } from "../../components/common/modals/QuestionModal/QuestionModal";
import { ExamModal } from "../../components/common/modals/ExamModal/ExamModal";
import { UserActionsModal } from "../../components/common/modals/UserActionsModal";
import api from "../../api/axios";
import { useLobbySocket } from "../../hooks/useLobbySocket";
import { useAppDispatch, useAppSelector } from "../../store/hooks";
import { updatePointStatus, mergeScores, openModal as openModalAction, closeModal as closeModalAction, openExamModal as openExamModalAction, closeExamModal as closeExamModalAction } from "../../store/lobbyPage/lobbySlice";

// –£–î–ê–õ–ò–¢–¨: ExamQuestion –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ ExamModal

export function LobbyPage() {
  const { id } = useParams<{ id: string }>();
  const lobbyId = useMemo(() => Number(id), [id]);
  const navigate = useNavigate();
  const dispatch = useAppDispatch();

  const usersInLobby = useAppSelector(s => s.lobbyPage.users);
  const activePlayerId = useAppSelector(s => s.lobbyPage.activePlayerId);
  const points = useAppSelector(s => s.lobbyPage.points);
  const { user } = useAppSelector(s => s.auth)
  const { userScore, sessionScore, incorrectAnswers } = useAppSelector(s => s.lobbyPage.scores);
  const {
    history,
    connected,
    connecting,
    sendChatMessage,
    sendAnswer,
    sendTimeout,
    sendExamComplete,
    sendOpenModal,
    sendOpenExam,
    sendExamAnswerProgress,
    sendCloseModal,
  } = useLobbySocket(lobbyId);

  const [input, setInput] = useState("");
  const [mapNaturalSize, setMapNaturalSize] = useState<{ w: number; h: number } | null>(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const [isUserActionsModalOpen, setIsUserActionsModalOpen] = useState(false);
  const [selectedUsername, setSelectedUsername] = useState("");
  useEffect(() => {
    const img = new Image();
    img.src = '/map.png';
    img.onload = () => {
      if (img.naturalWidth && img.naturalHeight) {
        setMapNaturalSize({ w: img.naturalWidth, h: img.naturalHeight });
      }
    };
  }, []);
  const listRef = useRef<HTMLDivElement | null>(null);

  // –ª–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–∞–ª–∫–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏). –¢–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º redux.modal –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [currentTopic, setCurrentTopic] = useState("");
  const [currentQuestion, setCurrentQuestion] = useState("");
  const [currentQuestionId, setCurrentQuestionId] = useState<number | null>(null);
  const [currentMentorTip, setCurrentMentorTip] = useState<string | null>(null);
  const [currentPointId, setCurrentPointId] = useState<string | null>(null);
  const modal = useAppSelector(s => s.lobbyPage.modal);
  const examModalOpenGlobal = useAppSelector(s => s.lobbyPage.examModalOpen);
  const modalResult = useAppSelector(s => s.lobbyPage.modalResult);

  // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–æ–¥–∞–ª–∫–∏: –µ—Å–ª–∏ –≤ Redux –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –º–æ–¥–∞–ª–∫–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
  const effectiveIsOpen = isModalOpen || modal.isOpen;
  const effectiveTopic = modal.isOpen ? modal.topic : currentTopic;
  const effectiveQuestion = modal.isOpen ? modal.question : currentQuestion;
  const effectiveQuestionId = modal.isOpen ? modal.questionId : currentQuestionId;
  const effectiveMentorTip = modal.isOpen ? modal.mentor_tip : currentMentorTip;

  // –£–î–ê–õ–ò–¢–¨: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —ç–∫–∑–∞–º–µ–Ω–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ ExamModal

  const openModal = async (pointId: string) => {
    const point = points.find(p => p.id === pointId);
    if (!point) return;

    if (pointId === "exam" && point.status !== "available") return;
    if (pointId !== "exam" && point.status !== "available") return;

    try {
      if (pointId !== "exam" && pointId !== "exam2") {
        console.log("üì° –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –≤–æ–ø—Ä–æ—Å:", {
          phase_id: point.phaseId,
          topic_id: point.topicId,
        });
        const res = await api.get("/api/question/textQuestion", {
          params: { phase_id: point.phaseId, topic_id: point.topicId },
          withCredentials: true,
        });
        setCurrentTopic(res.data.topic_title || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è");
        setCurrentQuestion(res.data.question_text);
        setCurrentQuestionId(res.data.question_id);
        setCurrentMentorTip(res.data.mentor_tip || null);
        setCurrentPointId(pointId);
        setIsModalOpen(true);
        const payload = { 
          questionId: res.data.question_id, 
          topic: res.data.topic_title || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è", 
          question: res.data.question_text,
          mentor_tip: res.data.mentor_tip || null
        };
        dispatch(openModalAction(payload));
        sendOpenModal(payload);
      } else {
        // –î–ª—è —ç–∫–∑–∞–º–µ–Ω–∞ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç –≤—Å–µ–º
        const phaseId = pointId === "exam" ? 1 : 2;
        const res = await api.get("/api/exam/examQuestion", {
          params: { phase_id: phaseId, count: usersInLobby.length + incorrectAnswers },
          withCredentials: true,
        });
        const questions = res.data?.questions ?? [];
        dispatch(openExamModalAction());
        sendOpenExam({ questions, examId: pointId });
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞:", err);
    }
  };

  // –£–î–ê–õ–ò–¢–¨: loadExamQuestions –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ ExamModal

  const updatePoint = (pointId: string, status: POIStatus) => {
    dispatch(updatePointStatus({ pointId, status }));
  };

  useEffect(() => {
    // –§–∞–∑–∞ 1: —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —ç–∫–∑–∞–º–µ–Ω, –∫–æ–≥–¥–∞ –≤—Å–µ 1-4 –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –Ω–æ –ù–ï —Ç—Ä–æ–≥–∞—Ç—å –µ—Å–ª–∏ —É–∂–µ completed
    const phase1 = points.filter(p => p.phaseId === 1 && p.id !== "exam");
    const exam1 = points.find(p => p.id === "exam");
    const phase1AllDone = phase1.every(p => p.status === "completed");
    if (exam1 && exam1.status !== "completed") {
      if (phase1AllDone && exam1.status === "locked") updatePoint("exam", "available");
      if (!phase1AllDone && exam1.status === "available") updatePoint("exam", "locked");
    }

    // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç–∫–∑–∞–º–µ–Ω–∞ 1 ‚Äî —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–º—ã 5-8 (—Ñ–∞–∑–∞ 2)
    const exam1Completed = exam1?.status === "completed";
    const phase2 = points.filter(p => p.phaseId === 2 && p.id !== "exam2");
    if (exam1Completed) {
      phase2.forEach(p => {
        if (p.status === "locked") updatePoint(p.id, "available");
      });
    }

    // –§–∞–∑–∞ 2: —ç–∫–∑–∞–º–µ–Ω 2 —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –¥–æ—Å—Ç—É–ø–µ–Ω, –∫–æ–≥–¥–∞ —Ç–µ–º—ã 5-8 –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
    const exam2 = points.find(p => p.id === "exam2");
    const phase2AllDone = phase2.every(p => p.status === "completed");
    if (exam2 && exam2.status !== "completed") {
      if (phase2AllDone && exam2.status === "locked") updatePoint("exam2", "available");
      if (!phase2AllDone && exam2.status === "available") updatePoint("exam2", "locked");
    }
  }, [points]);

  useEffect(() => {
    if (!listRef.current) return;
    listRef.current.scrollTop = listRef.current.scrollHeight;
  }, [history]);

  useEffect(() => {
    if (!lobbyId || Number.isNaN(lobbyId)) { navigate("/"); return; }
    const token = localStorage.getItem("accessToken");
    if (!token) { navigate("/login"); return; }
  }, [lobbyId, navigate]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    const text = input.trim();
    if (!text) return;
    sendChatMessage(text);
    setInput("");
  };

  const handleExitLobby = () => navigate("/");

  const handleUserClick = (username: string) => {
    // –ù–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–≤–æ–µ–≥–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏
    if (user?.username === username) return;
    
    setSelectedUsername(username);
    setIsUserActionsModalOpen(true);
  };

  const handleGoToProfile = () => {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log(`–ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${selectedUsername}`);
  };

  const handleAddFriend = () => {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–∑—å—è
    console.log(`–î–æ–±–∞–≤–∏—Ç—å –≤ –¥—Ä—É–∑—å—è: ${selectedUsername}`);
  };

  const handleExamComplete = (correctAnswers: number, totalQuestions: number) => {
    dispatch(updatePointStatus({ pointId: "exam", status: "completed" }));
    sendExamComplete(correctAnswers, totalQuestions);
  };

  const handleAnswerResult = (correct: boolean, scores: any) => {
    // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏—Å–ª–∞–ª –ø—Ä–æ –æ—á–∫–∏, –Ω–µ —Ç—Ä–æ–≥–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if (!scores) {
      return;
    }

    // –î–æ–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã payload
    const nested = (scores as any)?.scores;
    const isNumber = typeof scores === 'number';
    const flat = !nested && !isNumber ? scores : undefined;

    const nextUserScore = isNumber
      ? scores
      : nested
      ? (nested.userScore ?? nested.user_score ?? userScore)
      : (flat?.userScore ?? flat?.user_score ?? userScore);

    const nextSessionScore = isNumber
      ? scores
      : nested
      ? (nested.sessionScore ?? nested.session_score ?? sessionScore)
      : (flat?.sessionScore ?? flat?.session_score ?? sessionScore);

    const nextIncorrect = (nested?.incorrectAnswers ?? flat?.incorrectAnswers ?? incorrectAnswers);

    dispatch(mergeScores({
      userScore: Number(nextUserScore),
      sessionScore: Number(nextSessionScore),
      incorrectAnswers: Number(nextIncorrect),
    }));
    
    if (correct && currentPointId) {
      dispatch(updatePointStatus({ pointId: currentPointId, status: "completed" }));
      sendAnswer(currentPointId, true);
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–≤–µ—á–∞—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        setIsModalOpen(false);
        dispatch(closeModalAction());
      }, 3000);
    } else if (currentPointId) {
      // –ü—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –º–µ–Ω—è–µ–º —Ä–æ–ª—å, —Ç–æ—á–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω–æ–π –¥–ª—è –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
      console.log("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –º–µ–Ω—è–µ–º —Ä–æ–ª—å, —Ç–æ—á–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω–æ–π");
      sendAnswer(currentPointId, false);
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–≤–µ—á–∞—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        setIsModalOpen(false);
        dispatch(closeModalAction());
      }, 3000);
    }
  };

  // –õ–æ–∫–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É
  const handleLocalIncorrectAnswer = () => {
    console.log("üîç [CLIENT] handleLocalIncorrectAnswer –≤—ã–∑–≤–∞–Ω");
    console.log("üîç [CLIENT] currentPointId:", currentPointId);
    console.log("üîç [CLIENT] user?.id:", user?.id);
    console.log("üîç [CLIENT] activePlayerId:", activePlayerId);
    
    if (!currentPointId) {
      console.log("‚ùå [CLIENT] currentPointId –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç");
      return;
    }
    
    console.log("‚ùå [CLIENT] –õ–æ–∫–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏)");
    console.log("‚ùå [CLIENT] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º sendAnswer —Å pointId:", currentPointId, "correct: false");
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º pointId –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    const pointIdToSend = currentPointId;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä - –æ–Ω —Å–∞–º –æ–±–Ω–æ–≤–∏—Ç —Å—á–µ—Ç—á–∏–∫–∏ –∏ –ø–µ—Ä–µ–¥–∞—Å—Ç —Ö–æ–¥
    sendAnswer(pointIdToSend, false);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∫–∏ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
    console.log("üîí [CLIENT] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∫–∏ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º");
    sendCloseModal();
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –ª–æ–∫–∞–ª—å–Ω–æ
    setTimeout(() => {
      console.log("‚ùå [CLIENT] –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –ª–æ–∫–∞–ª—å–Ω–æ");
      setIsModalOpen(false);
      dispatch(closeModalAction());
      setCurrentPointId(null);
    }, 1000);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ timeout - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
  const handleTimeout = (pointId: string) => {
    console.log("‚è∞ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º timeout —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Ç–æ—á–∫–∏:", pointId);
    sendTimeout(pointId);
  };

  return (
    <div className={styles.lobbyPage}>
      <div
        className={styles.gameArea}
        style={mapNaturalSize ? ({ aspectRatio: `${mapNaturalSize.w} / ${mapNaturalSize.h}` } as React.CSSProperties) : undefined}
      >
        {points.map(point => (
          <Point
            key={point.id}
            id={point.id}
            title={point.title}
            top={point.top}
            left={point.left}
            status={point.status}
            onClick={openModal}
          />
        ))}
        
        {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ —Ä–µ–Ω–¥–µ—Ä—è—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –æ–±–ª–∞—Å—Ç–∏ –∫–∞—Ä—Ç—ã */}
         <QuestionModal
           isOpen={effectiveIsOpen}
           onClose={() => { setIsModalOpen(false); dispatch(closeModalAction()); }}
           topic={effectiveTopic}
           question={effectiveQuestion}
           questionId={effectiveQuestionId}
           pointId={currentPointId || undefined}
           lobbyId={lobbyId}
           onAnswerResult={handleAnswerResult}
           onLocalIncorrectAnswer={handleLocalIncorrectAnswer}
           onTimeout={handleTimeout}
           currentUserId={user?.id ?? 0}
           activePlayerId={activePlayerId}
           activePlayerName={
             usersInLobby.find(u => u.id === activePlayerId)?.username ?? ''
           }
           mentor_tip={effectiveMentorTip}
           sharedResult={modalResult}
         />

        <ExamModal
          isOpen={examModalOpenGlobal}
          onClose={() => {
            dispatch(closeExamModalAction());
          }}
          lobbyId={lobbyId}
          currentUserId={user?.id ?? 0}
          activePlayerId={activePlayerId}
          activePlayerName={
            usersInLobby.find(u => u.id === activePlayerId)?.username ?? ''
          }
          onExamComplete={handleExamComplete}
          onLocalIncorrectAnswer={handleLocalIncorrectAnswer}
          onTimeout={handleTimeout}
          sharedResult={modalResult}
          questions={useAppSelector(s => s.lobbyPage.examQuestions)}
          onAdvance={(correct: boolean) => {
            // –°–æ–æ–±—â–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É, –±—ã–ª –ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º, —á—Ç–æ–±—ã –æ–Ω –ø—Ä–æ–¥–≤–∏–Ω—É–ª –∏–Ω–¥–µ–∫—Å
            (sendExamAnswerProgress as any)?.(correct);
          }}
        />
      </div>

      <div className={styles.sidebar}>
        <Button className={styles.exitButton} onClick={handleExitLobby}>
          –í—ã–π—Ç–∏ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
        </Button>

        <div className={styles.usersList}>
          <h3>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ</h3>
          <ul>
            {usersInLobby.map(user => (
              <li
                key={user.id}
                className={styles.userItem}
                style={{
                  color: user.id === activePlayerId ? '#4caf50' : 'inherit',
                  fontWeight: user.id === activePlayerId ? 'bold' : 'normal'
                }}
              >
                <span 
                  className={styles.clickableUsername}
                  onClick={() => handleUserClick(user.username)}
                >
                  {user.username}
                </span>
                {user.id === activePlayerId && ' (–∞–∫—Ç–∏–≤–Ω—ã–π)'}
              </li>
            ))}
          </ul>
        </div>

        <div className={styles.scores}>
          <h3>–í–∞—à–∏ –æ—á–∫–∏</h3>
          <p>–û–±—â–∏–π —Å—á—ë—Ç: {userScore}</p>
          <p>–í —ç—Ç–æ–π –∏–≥—Ä–µ: {sessionScore}</p>
          <p>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {incorrectAnswers}</p> {/* –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ Redux */}
        </div>

        <div className={styles.chat}>
          <h3 className={styles.chatTitle}>
            –ß–∞—Ç –∫–æ–º–Ω–∞—Ç—ã{' '}
            <span
              className={`${styles.connectionIndicator} ${
                connecting
                  ? styles.connecting
                  : connected
                  ? styles.online
                  : styles.offline
              }`}
            />
          </h3>

          <div ref={listRef} className={styles.chatList}>
            {history.map(m => (
              <div
                key={m.id}
                className={
                  m.user.username === "system"
                    ? styles.systemMessage
                    : styles.message
                }
                title={new Date(m.createdAt).toLocaleString()}
              >
                {m.user.username !== "system" && (
                  <span className={styles.author}>{m.user.username}:</span>
                )}
                <span className={styles.text}>{m.text}</span>
              </div>
            ))}
          </div>

          <form className={styles.chatForm} onSubmit={handleSubmit}>
            <input
              className={styles.chatInput}
              placeholder={
                connecting
                  ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ‚Ä¶'
                  : connected
                  ? '–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ‚Ä¶'
                  : '–û—Ç–∫–ª—é—á–µ–Ω–æ'
              }
              value={input}
              onChange={e => setInput(e.target.value)}
              disabled={!connected}
              onKeyDown={e => {
                if (e.key === 'Enter' && !e.shiftKey) {
                  e.preventDefault();
                  sendChatMessage(input.trim());
                  setInput("");
                }
              }}
            />
            <Button
              type="submit"
              className={styles.sendButton}
              disabled={!connected || !input.trim()}
            >
              –û—Ç–ø—Ä–∞–≤–∏—Ç—å
            </Button>
          </form>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
      <UserActionsModal
        isOpen={isUserActionsModalOpen}
        onClose={() => setIsUserActionsModalOpen(false)}
        username={selectedUsername}
        onGoToProfile={handleGoToProfile}
        onAddFriend={handleAddFriend}
      />

    </div>
  );
}