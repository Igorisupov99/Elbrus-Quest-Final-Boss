import { useEffect, useMemo, useRef, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import styles from "./LobbyPage.module.css";
import { Button } from "../../components/common/Button/Button";
import { Point, type POIStatus } from "../../components/map/Point/Point";
import { QuestionModal } from "../../components/common/modals/QuestionModal/QuestionModal";
import { ExamModal } from "../../components/common/modals/ExamModal/ExamModal";
import UserActionsModal from "../../components/common/modals/UserActionsModal/UserActionsModal";
import api from "../../api/axios";
import { useLobbySocket } from "../../hooks/useLobbySocket";
import { useAppDispatch, useAppSelector } from "../../store/hooks";
import { updatePointStatus, mergeScores, openModal as openModalAction, closeModal as closeModalAction, openExamModal as openExamModalAction, closeExamModal as closeExamModalAction, setModalResult, closePhaseTransitionModal, closeExamFailureModal, closeReconnectWaitingModal } from "../../store/lobbyPage/lobbySlice";
import { updateUserScore } from "../../store/authSlice";
import { AchievementNotification } from "../../components/Achievement/AchievementNotification/AchievementNotification";
import type { Achievement } from "../../types/achievement";
import PhaseTransitionModal from "../../components/common/modals/PhaseTransitionModal";
import ExamFailureModal from "../../components/common/modals/ExamFailureModal";
import { ReconnectWaitingModal } from "../../components/common/modals/ReconnectWaitingModal";
// import { CloseConfirmModal } from "../../components/common/modals/CloseConfirmModal"; // –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω

export function LobbyPage() {
  const { id } = useParams<{ id: string }>();
  const lobbyId = useMemo(() => Number(id), [id]);
  const navigate = useNavigate();
  const dispatch = useAppDispatch();

  const usersInLobby = useAppSelector(s => s.lobbyPage.users);
  const activePlayerId = useAppSelector(s => s.lobbyPage.activePlayerId);
  const points = useAppSelector(s => s.lobbyPage.points);
  const { user } = useAppSelector(s => s.auth)
  const { userScore, sessionScore, incorrectAnswers } = useAppSelector(s => s.lobbyPage.scores);
  const phaseTransitionModal = useAppSelector(s => s.lobbyPage.phaseTransitionModal);
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–∫–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  useEffect(() => {
    console.log(`üí∞ [LobbyPage] –¢–µ–∫—É—â–∏–µ –æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userScore}`);
  }, [userScore]);
  const examFailureModal = useAppSelector(s => s.lobbyPage.examFailureModal);
  const reconnectWaitingModal = useAppSelector(s => s.lobbyPage.reconnectWaitingModal);
  const {
    history,
    connected,
    connecting,
    sendChatMessage,
    sendAnswer,
    sendTimeout,
    sendOpenModal,
    sendOpenExam,
    sendExamAnswerProgress,
    sendCloseModal,
    sendIncorrectAnswer,
    sendPassTurn,
    sendIncorrectCountUpdate,
    sendCorrectAnswer,
    sendPassTurnNotification,
    sendAnswerInput,
    sendExamAnswerInput,
    sendLeaveLobby,
    sendCheckActiveQuestion,
    sendCheckActiveExam,
    sendAIQuestion,
  } = useLobbySocket(
    lobbyId,
    (answer: string) => setSyncedAnswer(answer),
    (answer: string) => setSyncedExamAnswer(answer)
  );

  const [input, setInput] = useState("");
  const [mapNaturalSize, setMapNaturalSize] = useState<{ w: number; h: number } | null>(null);
  const [currentPointId, setCurrentPointId] = useState<string | null>(null);
  const [syncedAnswer, setSyncedAnswer] = useState("");
  const [syncedExamAnswer, setSyncedExamAnswer] = useState("");
  
  const modal = useAppSelector(s => s.lobbyPage.modal);
  const examModalOpenGlobal = useAppSelector(s => s.lobbyPage.examModalOpen);
  const modalResult = useAppSelector(s => s.lobbyPage.modalResult);

  const [achievementNotifications, setAchievementNotifications] = useState<Achievement[]>([]);
  const [inactivePlayerNotification, setInactivePlayerNotification] = useState<string | null>(null);
  const [activeQuestionPointId, setActiveQuestionPointId] = useState<string | null>(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const [isUserActionsModalOpen, setIsUserActionsModalOpen] = useState(false);
  const [selectedUsername, setSelectedUsername] = useState("");
  useEffect(() => {
    const img = new Image();
    img.src = '/map.png';
    img.onload = () => {
      if (img.naturalWidth && img.naturalHeight) {
        setMapNaturalSize({ w: img.naturalWidth, h: img.naturalHeight });
      }
    };
  }, []);

  const listRef = useRef<HTMLDivElement | null>(null);

  const openModal = async (pointId: string) => {
    const point = points.find(p => p.id === pointId);
    if (!point || point.status !== "available") return;

    // –ï—Å–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫ –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —ç–∫–∑–∞–º–µ–Ω
    if (user?.id !== activePlayerId) {
      if (pointId === "exam" || pointId === "exam2") {
        // –î–ª—è —ç–∫–∑–∞–º–µ–Ω–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —ç–∫–∑–∞–º–µ–Ω
        console.log('üëÅÔ∏è [INACTIVE] –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —ç–∫–∑–∞–º–µ–Ω –¥–ª—è –ø–æ–∏–Ω—Ç–∞:', pointId);
        sendCheckActiveExam(pointId);
      } else {
        // –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        console.log('üëÅÔ∏è [INACTIVE] –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏–Ω—Ç–∞:', pointId);
        sendCheckActiveQuestion(pointId);
      }
      return;
    }

    try {
      if (pointId !== "exam" && pointId !== "exam2") {
        const res = await api.get("/api/question/textQuestion", {
          params: { phase_id: point.phaseId, topic_id: point.topicId },
          withCredentials: true,
        });
        
        const payload = { 
          questionId: res.data.question_id, 
          topic: res.data.topic_title || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è", 
          question: res.data.question_text,
          mentor_tip: res.data.mentor_tip || null,
          pointId: pointId
        };
        
        setCurrentPointId(pointId);
        dispatch(openModalAction(payload));
        sendOpenModal(payload);
      } else {
        const phaseId = pointId === "exam" ? 1 : 2;
        const res = await api.get("/api/exam/examQuestion", {
          params: { phase_id: phaseId, count: usersInLobby.length + incorrectAnswers },
          withCredentials: true,
        });
        const questions = res.data?.questions ?? [];
        dispatch(openExamModalAction());
        sendOpenExam({ questions, examId: pointId });
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞:", err);
    }
  };

  // –£–î–ê–õ–ò–¢–¨: loadExamQuestions –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ ExamModal

  const updatePoint = (pointId: string, status: POIStatus) => {
    dispatch(updatePointStatus({ pointId, status }));
  };

  useEffect(() => {
    // –§–∞–∑–∞ 1: —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —ç–∫–∑–∞–º–µ–Ω, –∫–æ–≥–¥–∞ –≤—Å–µ 1-4 –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –Ω–æ –ù–ï —Ç—Ä–æ–≥–∞—Ç—å –µ—Å–ª–∏ —É–∂–µ completed
    const phase1 = points.filter(p => p.phaseId === 1 && p.id !== "exam");
    const exam1 = points.find(p => p.id === "exam");
    const phase1AllDone = phase1.every(p => p.status === "completed");
    if (exam1 && exam1.status !== "completed") {
      if (phase1AllDone && exam1.status === "locked") updatePoint("exam", "available");
      if (!phase1AllDone && exam1.status === "available") updatePoint("exam", "locked");
    }

    // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç–∫–∑–∞–º–µ–Ω–∞ 1 ‚Äî —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–º—ã 5-8 (—Ñ–∞–∑–∞ 2)
    const exam1Completed = exam1?.status === "completed";
    const phase2 = points.filter(p => p.phaseId === 2 && p.id !== "exam2");
    if (exam1Completed) {
      phase2.forEach(p => {
        if (p.status === "locked") updatePoint(p.id, "available");
      });
    }

    // –§–∞–∑–∞ 2: —ç–∫–∑–∞–º–µ–Ω 2 —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –¥–æ—Å—Ç—É–ø–µ–Ω, –∫–æ–≥–¥–∞ —Ç–µ–º—ã 5-8 –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
    const exam2 = points.find(p => p.id === "exam2");
    const phase2AllDone = phase2.every(p => p.status === "completed");
    if (exam2 && exam2.status !== "completed") {
      if (phase2AllDone && exam2.status === "locked") updatePoint("exam2", "available");
      if (!phase2AllDone && exam2.status === "available") updatePoint("exam2", "locked");
    }
  }, [points]);

  useEffect(() => {
    if (!listRef.current) return;
    listRef.current.scrollTop = listRef.current.scrollHeight;
  }, [history]);

  useEffect(() => {
    if (!lobbyId || Number.isNaN(lobbyId)) { navigate("/"); return; }
    const token = localStorage.getItem("accessToken");
    if (!token) { navigate("/login"); return; }
  }, [lobbyId, navigate]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
  useEffect(() => {
    const handleAchievementReceived = (event: CustomEvent) => {
      const { userId, achievements } = event.detail;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (user && Number(userId) === Number(user.id)) {
        setAchievementNotifications(achievements);
      }
    };

    window.addEventListener('achievement:received', handleAchievementReceived as EventListener);
    
    return () => {
      window.removeEventListener('achievement:received', handleAchievementReceived as EventListener);
    };
  }, [user]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ currentPointId –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞
  useEffect(() => {
    const handleSetCurrentPointId = (event: CustomEvent) => {
      const { pointId } = event.detail;
      console.log('üîÑ [QUESTION] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º currentPointId –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏:', pointId);
      setCurrentPointId(pointId);
    };

    const handleNoActiveQuestion = () => {
      console.log('‚ùå [INACTIVE] –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
      const activePlayer = usersInLobby.find(u => u.id === activePlayerId);
      const activePlayerName = activePlayer?.username || '–¥—Ä—É–≥–æ–π –∏–≥—Ä–æ–∫';
      setInactivePlayerNotification(`–°–µ–π—á–∞—Å –≤–æ–ø—Ä–æ—Å –≤—ã–±–∏—Ä–∞–µ—Ç ${activePlayerName}`);
      setTimeout(() => setInactivePlayerNotification(null), 3000);
    };

    const handleWrongPoint = (event: CustomEvent) => {
      const { activePointId } = event.detail;
      console.log('‚ùå [INACTIVE] –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–∏–Ω—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
      
      // –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏–Ω—Ç–∞
      const activePoint = points.find(p => p.id === activePointId);
      const activePointTitle = activePoint?.title || `–ø–æ–∏–Ω—Ç ${activePointId}`;
      
      setInactivePlayerNotification(`–ê–∫—Ç–∏–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ "${activePointTitle}"`);
      setTimeout(() => setInactivePlayerNotification(null), 3000);
    };

    const handleActivePointChanged = (event: CustomEvent) => {
      const { activePointId } = event.detail;
      setActiveQuestionPointId(activePointId);
    };

    const handleNoActiveExam = () => {
      console.log('‚ùå [INACTIVE] –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–∫–∑–∞–º–µ–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
      const activePlayer = usersInLobby.find(u => u.id === activePlayerId);
      const activePlayerName = activePlayer?.username || '–¥—Ä—É–≥–æ–π –∏–≥—Ä–æ–∫';
      setInactivePlayerNotification(`–°–µ–π—á–∞—Å —ç–∫–∑–∞–º–µ–Ω –≤—ã–±–∏—Ä–∞–µ—Ç ${activePlayerName}`);
      setTimeout(() => setInactivePlayerNotification(null), 3000);
    };

    const handleWrongExam = (event: CustomEvent) => {
      const { activeExamId } = event.detail;
      console.log('‚ùå [INACTIVE] –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–∫–∑–∞–º–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
      
      // –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–∫–∑–∞–º–µ–Ω–∞
      const examName = activeExamId === 'exam2' ? '–≠–∫–∑–∞–º–µ–Ω 2' : '–≠–∫–∑–∞–º–µ–Ω';
      
      setInactivePlayerNotification(`–ê–∫—Ç–∏–≤–Ω—ã–π —ç–∫–∑–∞–º–µ–Ω: "${examName}"`);
      setTimeout(() => setInactivePlayerNotification(null), 3000);
    };

    window.addEventListener('question:setCurrentPointId', handleSetCurrentPointId as EventListener);
    window.addEventListener('question:noActiveQuestion', handleNoActiveQuestion as EventListener);
    window.addEventListener('question:wrongPoint', handleWrongPoint as EventListener);
    window.addEventListener('exam:noActiveExam', handleNoActiveExam as EventListener);
    window.addEventListener('exam:wrongExam', handleWrongExam as EventListener);
    window.addEventListener('lobby:activePointChanged', handleActivePointChanged as EventListener);
    
    return () => {
      window.removeEventListener('question:setCurrentPointId', handleSetCurrentPointId as EventListener);
      window.removeEventListener('question:noActiveQuestion', handleNoActiveQuestion as EventListener);
      window.removeEventListener('question:wrongPoint', handleWrongPoint as EventListener);
      window.removeEventListener('exam:noActiveExam', handleNoActiveExam as EventListener);
      window.removeEventListener('exam:wrongExam', handleWrongExam as EventListener);
      window.removeEventListener('lobby:activePointChanged', handleActivePointChanged as EventListener);
    };
  }, [usersInLobby, activePlayerId, points]);

  // –õ–æ–∫–∞–ª—å–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç—ã

  const handleCloseAchievementNotification = () => {
    setAchievementNotifications([]);
  };

  const handleQuestionModalClose = () => {
    // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã–π - –∑–∞–∫—Ä—ã–≤–∞–µ–º –∏ –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    if (user?.id === activePlayerId) {
      console.log('üîí [ACTIVE] –ê–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å - –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç');
      
      if (!currentPointId) return;
      
      // –ó–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã–º –∏–≥—Ä–æ–∫–æ–º
      const newIncorrectCount = (incorrectAnswers || 0) + 1;
      dispatch(mergeScores({
        incorrectAnswers: newIncorrectCount
      }));
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –∞–∫—Ç–∏–≤–Ω—ã–º –∏–≥—Ä–æ–∫–æ–º (–∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç)
      sendTimeout(currentPointId);
      
      return;
    }

    // –ï—Å–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫ - –∑–∞–∫—Ä—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç—å)
    console.log('üîí [INACTIVE] –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –ª–æ–∫–∞–ª—å–Ω–æ');
    dispatch(closeModalAction());
    setCurrentPointId(null);
  };

  // –§—É–Ω–∫—Ü–∏–∏ handleConfirmClose –∏ handleCancelClose –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã


  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    const text = input.trim();
    if (!text) return;
    sendChatMessage(text);
    setInput("");
  };


  const handleExitLobby = () => {
    sendLeaveLobby(); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–º–µ—Ä–µ–Ω–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ –ª–æ–±–±–∏
    navigate("/");
  };

  const handleUserClick = (username: string) => {
    // –ù–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–≤–æ–µ–≥–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏
    if (user?.username === username) return;
    
    setSelectedUsername(username);
    setIsUserActionsModalOpen(true);
  };

  const handleGoToProfile = () => {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log(`–ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${selectedUsername}`);
  };

  const handleAddFriend = async () => {
    if (!selectedUsername) return;
    
    try {
      console.log('–ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–∑—å—è –¥–ª—è:', selectedUsername);
      
      // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
      const { getUserByUsername, sendFriendRequest } = await import('../../api/friendship/friendshipApi');
      const userResponse = await getUserByUsername(selectedUsername);
      
      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userResponse);
      
      if (userResponse.success && userResponse.data) {
        console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É –¥–ª—è ID:', userResponse.data.id);
        const friendResponse = await sendFriendRequest(userResponse.data.id);
        
        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', friendResponse);
        
        if (friendResponse.success) {
          alert(`–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${selectedUsername}`);
        } else {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', friendResponse.message);
          alert(friendResponse.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥—Ä—É–∂–±—É');
        }
      } else {
        console.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', userResponse.message);
        alert(userResponse.message || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
    } catch (error: any) {
      console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –¥—Ä—É–∑—å—è:', error);
      alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –¥—Ä—É–∑—å—è: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
    
    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–æ –≤ UserActionsModal, –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∑–¥–µ—Å—å –¥–≤–∞–∂–¥—ã
  };


  const handleAnswerResult = (correct: boolean, scores: any, answer?: string) => {
    if (correct && scores) {
      // –ü—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—á–∫–∏ –∏–∑ —Å–µ—Ä–≤–µ—Ä–∞
      const nested = (scores as any)?.scores;
      const isNumber = typeof scores === 'number';
      const flat = !nested && !isNumber ? scores : undefined;

      const nextUserScore = isNumber
        ? scores
        : nested
        ? (nested.userScore ?? nested.user_score ?? userScore)
        : (flat?.userScore ?? flat?.user_score ?? userScore);

      const nextSessionScore = isNumber
        ? scores
        : nested
        ? (nested.sessionScore ?? nested.session_score ?? sessionScore)
        : (flat?.sessionScore ?? flat?.session_score ?? sessionScore);

      const nextIncorrect = (nested?.incorrectAnswers ?? flat?.incorrectAnswers ?? incorrectAnswers);

      dispatch(mergeScores({
        userScore: Number(nextUserScore),
        sessionScore: Number(nextSessionScore),
        incorrectAnswers: Number(nextIncorrect),
      }));
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–∞–≥–∞–∑–∏–Ω–µ
      dispatch(updateUserScore(Number(nextUserScore)));
    }
    
    if (correct && currentPointId) {
      dispatch(updatePointStatus({ pointId: currentPointId, status: "completed" }));
      sendAnswer(currentPointId, true, answer);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
      sendCorrectAnswer();
      
      // –õ–æ–∫–∞–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É —É –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
      setTimeout(() => {
        dispatch(closeModalAction());
        setCurrentPointId(null);
      }, 3000);
    } else if (currentPointId) {
      // –ü—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
      const newIncorrectCount = (incorrectAnswers || 0) + 1;
      dispatch(mergeScores({
        incorrectAnswers: newIncorrectCount
      }));
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
      // –ù–ï –ø–µ—Ä–µ–¥–∞–µ–º —Ö–æ–¥ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É - –∞–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑
      sendIncorrectAnswer(newIncorrectCount);
    }
  };


  const handleCloseModal = () => {
    if (!currentPointId) return;
    
    // –ó–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª–∫–∏
    const newIncorrectCount = (incorrectAnswers || 0) + 1;
    dispatch(mergeScores({
      incorrectAnswers: newIncorrectCount
    }));
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –±–µ–∑ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    sendIncorrectCountUpdate(newIncorrectCount);
    
    // –ü–µ—Ä–µ–¥–∞–µ–º —Ö–æ–¥ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
    sendPassTurn();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–¥–∞—á–µ —Ö–æ–¥–∞ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
    sendPassTurnNotification();
    
    // –õ–æ–∫–∞–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    setTimeout(() => {
      dispatch(closeModalAction());
      setCurrentPointId(null);
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∫–∏ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      sendCloseModal();
    }, 2000);
  };


  const handleTimeoutClose = () => {
    if (!currentPointId) return;
    
    console.log('‚è∞ [TIMEOUT] –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞:', currentPointId);
    
    // –ó–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
    const newIncorrectCount = (incorrectAnswers || 0) + 1;
    dispatch(mergeScores({
      incorrectAnswers: newIncorrectCount
    }));
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –±–µ–∑ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    sendIncorrectCountUpdate(newIncorrectCount);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —Ç–∞–π–º–∞—É—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (—Å–µ—Ä–≤–µ—Ä —Å–∞–º –ø–µ—Ä–µ–¥–∞—Å—Ç —Ö–æ–¥)
    sendTimeout(currentPointId);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–¥–∞—á–µ —Ö–æ–¥–∞
    dispatch(setModalResult('‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ! –•–æ–¥ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É'));
    setTimeout(() => {
      dispatch(setModalResult(null));
      dispatch(closeModalAction());
      setCurrentPointId(null);
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∫–∏ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      sendCloseModal();
    }, 2000);
  };

  return (
    <div className={styles.lobbyPage}>
      <div
        className={styles.gameArea}
        style={mapNaturalSize ? ({ aspectRatio: `${mapNaturalSize.w} / ${mapNaturalSize.h}` } as React.CSSProperties) : undefined}
      >
        {points.map(point => (
          <Point
            key={point.id}
            id={point.id}
            title={point.title}
            top={point.top}
            left={point.left}
            status={point.status}
            isActive={activeQuestionPointId === point.id}
            onClick={openModal}
          />
        ))}
        
        {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ —Ä–µ–Ω–¥–µ—Ä—è—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –æ–±–ª–∞—Å—Ç–∏ –∫–∞—Ä—Ç—ã */}
         <QuestionModal
           isOpen={modal.isOpen}
           onClose={handleQuestionModalClose}
           topic={modal.topic}
           question={modal.question}
           questionId={modal.questionId}
           lobbyId={lobbyId}
           onAnswerResult={handleAnswerResult}
           onCloseModal={handleCloseModal}
           onTimeoutClose={handleTimeoutClose}
           currentUserId={user?.id ?? 0}
           activePlayerId={activePlayerId}
           activePlayerName={
             usersInLobby.find(u => u.id === activePlayerId)?.username ?? ''
           }
           mentor_tip={modal.mentor_tip}
           userScore={userScore}
           sharedResult={modalResult}
           onAnswerSync={(answer: string, activePlayerName: string) => {
             // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
             console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞:', { answer, activePlayerName });
             sendAnswerInput(answer, activePlayerName);
           }}
           syncedAnswer={syncedAnswer}
         />

        <ExamModal
          isOpen={examModalOpenGlobal}
          onClose={() => {
            dispatch(closeExamModalAction());
          }}
          lobbyId={lobbyId}
          currentUserId={user?.id ?? 0}
          activePlayerId={activePlayerId}
          activePlayerName={
            usersInLobby.find(u => u.id === activePlayerId)?.username ?? ''
          }
          questions={useAppSelector(s => s.lobbyPage.examQuestions)}
          onAdvance={(correct: boolean, isTimeout?: boolean, answer?: string) => {
            // –°–æ–æ–±—â–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É, –±—ã–ª –ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º, —á—Ç–æ–±—ã –æ–Ω –ø—Ä–æ–¥–≤–∏–Ω—É–ª –∏–Ω–¥–µ–∫—Å
            (sendExamAnswerProgress as any)?.(correct, isTimeout, answer);
          }}
          onTimerReset={(timeLeft: number) => {
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞
            console.log('‚è∞ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–∞–π–º–µ—Ä–∞:', timeLeft);
          }}
          onAnswerSync={(answer: string, activePlayerName: string) => {
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞:', { answer, activePlayerName });
            sendExamAnswerInput(answer, activePlayerName);
          }}
          syncedAnswer={syncedExamAnswer}
          onExamFail={() => {
            // –ü—Ä–æ–≤–∞–ª–∏–≤–∞–µ–º —ç–∫–∑–∞–º–µ–Ω –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã–º –∏–≥—Ä–æ–∫–æ–º
            console.log('‚ùå –≠–∫–∑–∞–º–µ–Ω –ø—Ä–æ–≤–∞–ª–µ–Ω –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã–º –∏–≥—Ä–æ–∫–æ–º');
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–≤–∞–ª–∞ —ç–∫–∑–∞–º–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            // –≠—Ç–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–º –∏ –ø–æ–∫–∞–∂–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ–≤–∞–ª–∞
            sendExamAnswerProgress(false, false, 'exam_closed_by_user');
          }}
        />

        <PhaseTransitionModal
          isOpen={phaseTransitionModal.isOpen}
          onClose={() => dispatch(closePhaseTransitionModal())}
          phaseNumber={phaseTransitionModal.phaseNumber}
          rewardPoints={phaseTransitionModal.rewardPoints}
        />

        <ExamFailureModal
          isOpen={examFailureModal.isOpen}
          onClose={() => dispatch(closeExamFailureModal())}
          correctAnswers={examFailureModal.correctAnswers}
          totalQuestions={examFailureModal.totalQuestions}
          successRate={examFailureModal.successRate}
          phaseId={examFailureModal.phaseId}
        />

        <ReconnectWaitingModal
          isOpen={reconnectWaitingModal.isOpen}
          activePlayerName={reconnectWaitingModal.activePlayerName}
          timeLeft={reconnectWaitingModal.timeLeft}
          onTimeUp={() => {
            console.log('‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ');
            dispatch(closeReconnectWaitingModal());
          }}
        />

        {/* CloseConfirmModal –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω - –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –∑–∞–∫—Ä—ã–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ */}
      </div>

      <div className={styles.sidebar}>
        <Button className={styles.exitButton} onClick={handleExitLobby}>
          –í—ã–π—Ç–∏ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
        </Button>

        <div className={styles.usersList}>
          <h3>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ</h3>
          <ul>
            {usersInLobby.map(user => (
              <li
                key={user.id}
                className={styles.userItem}
                style={{
                  color: user.id === activePlayerId ? '#4caf50' : 'inherit',
                  fontWeight: user.id === activePlayerId ? 'bold' : 'normal'
                }}
              >
                <span 
                  className={styles.clickableUsername}
                  onClick={() => handleUserClick(user.username)}
                >
                  {user.username}
                </span>
                {user.id === activePlayerId && ' (–∞–∫—Ç–∏–≤–Ω—ã–π)'}
              </li>
            ))}
          </ul>
        </div>

        <div className={styles.scores}>
          <h3>–í–∞—à–∏ –æ—á–∫–∏</h3>
          <p>–û–±—â–∏–π —Å—á—ë—Ç: {userScore}</p>
          <p>–í —ç—Ç–æ–π –∏–≥—Ä–µ: {sessionScore}</p>
          <p>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {incorrectAnswers}</p> {/* –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ Redux */}
        </div>

        <div className={styles.chat}>
          <h3 className={styles.chatTitle}>
            –ß–∞—Ç –∫–æ–º–Ω–∞—Ç—ã{' '}
            <span
              className={`${styles.connectionIndicator} ${
                connecting
                  ? styles.connecting
                  : connected
                  ? styles.online
                  : styles.offline
              }`}
            />
          </h3>

          <div ref={listRef} className={styles.chatList}>
            {history.map(m => (
              <div
                key={m.id}
                className={
                  m.user.username === "system"
                    ? styles.systemMessage
                    : (m as any).isAI
                    ? styles.aiMessage
                    : styles.message
                }
                title={new Date(m.createdAt).toLocaleString()}
              >
                {m.user.username !== "system" && (
                  <span className={styles.author}>{m.user.username}:</span>
                )}
                <span className={styles.text}>{m.text}</span>
                {(m as any).usage && (
                  <div className={styles.usageInfo}>
                    –¢–æ–∫–µ–Ω—ã: {(m as any).usage.totalTokens}
                  </div>
                )}
              </div>
            ))}
          </div>


          <form className={styles.chatForm} onSubmit={handleSubmit}>
            <input
              className={styles.chatInput}
              placeholder={
                connecting
                  ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ‚Ä¶'
                  : connected
                  ? '–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ‚Ä¶'
                  : '–û—Ç–∫–ª—é—á–µ–Ω–æ'
              }
              value={input}
              onChange={e => setInput(e.target.value)}
              disabled={!connected}
              onKeyDown={e => {
                if (e.key === 'Enter' && !e.shiftKey) {
                  e.preventDefault();
                  sendChatMessage(input.trim());
                  setInput("");
                }
              }}
            />
            <Button
              type="submit"
              className={styles.sendButton}
              disabled={!connected || !input.trim()}
            >
              –û—Ç–ø—Ä–∞–≤–∏—Ç—å
            </Button>
          </form>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
      <UserActionsModal
        isOpen={isUserActionsModalOpen}
        onClose={() => setIsUserActionsModalOpen(false)}
        username={selectedUsername}
        onGoToProfile={handleGoToProfile}
        onAddFriend={handleAddFriend}
      />

      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö */}
      {achievementNotifications.length > 0 && (
        <AchievementNotification
          achievements={achievementNotifications}
          onClose={handleCloseAchievementNotification}
        />
      )}

      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ */}
      {inactivePlayerNotification && (
        <div style={{
          position: 'fixed',
          top: '20px',
          left: '50%',
          transform: 'translateX(-50%)',
          background: 'rgba(255, 107, 53, 0.95)',
          color: 'white',
          padding: '12px 24px',
          borderRadius: '8px',
          fontWeight: 'bold',
          fontSize: '16px',
          boxShadow: '0 4px 12px rgba(0, 0, 0, 0.3)',
          zIndex: 9999,
          animation: 'fadeInOut 3s ease-in-out forwards',
          fontFamily: 'Cinzel, serif'
        }}>
          ‚ö†Ô∏è {inactivePlayerNotification}
        </div>
      )}

    </div>
  );
}