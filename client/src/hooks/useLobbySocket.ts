import { useEffect, useState } from "react";
import { useAppDispatch, useAppSelector } from "../store/hooks";
import type { RootState } from "../store/store";
import { type ChatHistoryItem, type IncomingChatMessage, socketClient, type SystemEvent } from "../socket/socketLobbyPage";
import { initialState, setScores, mergeScores, openModal, setModalResult, closeModal, openExamModal, closeExamModal, setExamQuestions, setExamIndex, clearExamQuestions, openPhaseTransitionModal, openExamFailureModal, openReconnectWaitingModal, closeReconnectWaitingModal } from "../store/lobbyPage/lobbySlice";
import { updateUserScore } from "../store/authSlice";
import {
  setUsers,
  setPoints,
  updatePointStatus,
} from "../store/lobbyPage/lobbySlice";

export function useLobbySocket(lobbyId: number, onAnswerInputSync?: (answer: string) => void, onExamAnswerInputSync?: (answer: string) => void) {
  const dispatch = useAppDispatch();
  const token = localStorage.getItem("accessToken");
  const { user } = useAppSelector((state: RootState) => state.auth);

  const [history, setHistory] = useState<ChatHistoryItem[]>([]);
  const [connected, setConnected] = useState(false);
  const [connecting, setConnecting] = useState(true);

  useEffect(() => {
    if (!token) return;
    socketClient.connectWithToken(token, lobbyId);

    const socket = socketClient.socket;

    const onConnect = () => {
      setConnected(true);
      setConnecting(false);
    };
    const onDisconnect = () => {
      setConnected(false);
      setConnecting(true);
    };
    const onConnectError = () => {
      setConnected(false);
      setConnecting(false);
    };
    const onHistory = (items: ChatHistoryItem[]) => setHistory(items);
    const onChatMessage = (msg: IncomingChatMessage) => setHistory(prev => [...prev, msg]);
    const onSystem = (evt: SystemEvent) => {
      const text = evt.type === "join" ? `${evt.username} –≤–æ—à—ë–ª –≤ –ª–æ–±–±–∏` : `${evt.username} –ø–æ–∫–∏–Ω—É–ª –ª–æ–±–±–∏`;
      setHistory(prev => [...prev, {
        id: Date.now(),
        text,
        user: { id: 0, username: "system" },
        createdAt: new Date().toISOString(),
      }]);
    };
    const onError = (payload: any) => console.error("–æ—à–∏–±–∫–∞ —á–∞—Ç–∞", payload);

    const onUsers = ({ users, activePlayerId }: any) => dispatch(setUsers({ users, activePlayerId }));
    const onInitPoints = (points: any) => dispatch(setPoints(points));
    const onPointStatus = ({ pointId, status}: any) => dispatch(updatePointStatus({ pointId, status }));

    const onInitScores = (payload: any) => {
      const nextIncorrect = payload?.incorrectAnswers ?? payload?.incorrect_answers ?? 0;
      dispatch(setScores({
        userScore: payload.userScore ?? 0,
        sessionScore: payload.sessionScore ?? 0,
        incorrectAnswers: nextIncorrect,
      }));
    };

    const onScores = (payload: any) => {
      dispatch(mergeScores({ sessionScore: payload.sessionScore }));
      if (payload.userId && user?.id && Number(payload.userId) === Number(user.id)) {
        dispatch(mergeScores({ userScore: payload.userScore }));
      }
    };

    // –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ onCorrectAnswer - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞—Ö –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ

    const onIncorrectAnswer = (payload: any) => {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —É –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
      const incorrectCount = payload.incorrectAnswers || payload.incorrect_answers || 0;
      dispatch(mergeScores({
        incorrectAnswers: incorrectCount
      }));
      
      dispatch(setModalResult('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!'));
      setTimeout(() => dispatch(setModalResult(null)), 2000);
    };

    const onIncorrectCountUpdate = (payload: { incorrectAnswers: number }) => {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –±–µ–∑ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      dispatch(mergeScores({
        incorrectAnswers: payload.incorrectAnswers
      }));
    };

    const onCorrectAnswer = () => {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
      dispatch(setModalResult('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! (+10 –æ—á–∫–æ–≤)'));
      setTimeout(() => {
        dispatch(setModalResult(null));
        dispatch(closeModal());
      }, 3000);
    };

    const onExamCorrectAnswer = (payload: { message: string }) => {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –≤ —ç–∫–∑–∞–º–µ–Ω–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
      console.log('onExamCorrectAnswer: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', payload.message);
      dispatch(setModalResult(payload.message));
      setTimeout(() => {
        console.log('onExamCorrectAnswer: —É–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã');
        dispatch(setModalResult(null));
      }, 2000);
    };

    const onTimeout = () => {
      dispatch(setModalResult('–•–æ–¥ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É'));
      setTimeout(() => {
        dispatch(setModalResult(null));
        dispatch(closeModal());
        dispatch(closeExamModal());
      }, 2000);
    };

    const onPassTurnNotification = () => {
      dispatch(setModalResult('–•–æ–¥ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É'));
      setTimeout(() => {
        dispatch(setModalResult(null));
        dispatch(closeModal());
        dispatch(closeExamModal());
      }, 2000);
    };
    
    const onOpenModal = (payload: { questionId: number; topic: string; question: string }) => {
      dispatch(openModal(payload));
    };

    const onQuestionRestore = (payload: { 
      questionId: number;
      topic: string;
      question: string;
      mentor_tip?: string;
      timeLeft: number;
      pointId?: string;
    }) => {
      console.log('üîÑ [QUESTION] –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å:', payload);
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
      dispatch(openModal({
        questionId: payload.questionId,
        topic: payload.topic,
        question: payload.question,
        mentor_tip: payload.mentor_tip
      }));
      
      // –≠–º–∏—Ç–∏–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ currentPointId –≤ LobbyPage
      window.dispatchEvent(new CustomEvent('question:setCurrentPointId', { 
        detail: { pointId: payload.pointId || String(payload.questionId) } 
      }));
      
      console.log(`üìù [QUESTION] –í–æ–ø—Ä–æ—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ID ${payload.questionId}, —Ç–µ–º–∞ "${payload.topic}"`);
      console.log(`‚è∞ [QUESTION] –¢–∞–π–º–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –æ—Å—Ç–∞–ª–æ—Å—å ${payload.timeLeft} —Å–µ–∫—É–Ω–¥`);
      
      // –≠–º–∏—Ç–∏–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–∞–π–º–µ—Ä–∞ –≤ QuestionModal
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É—Å–ø–µ–ª–æ –æ—Ç–∫—Ä—ã—Ç—å—Å—è
      setTimeout(() => {
        window.dispatchEvent(new CustomEvent('question:timerReset', { 
          detail: { timeLeft: payload.timeLeft } 
        }));
      }, 200); // 200–º—Å –∑–∞–¥–µ—Ä–∂–∫–∞
    };
    const onExamStart = (payload: { questions: any[]; index: number }) => {
      dispatch(setExamQuestions(payload.questions));
      dispatch(setExamIndex(payload.index));
      dispatch(openExamModal());
    };
    
    const onExamNext = (payload: { index: number; question?: any }) => {
      dispatch(setExamIndex(payload.index));
    };

    const onExamRestore = (payload: { 
      examId: string;
      questions: any[];
      currentIndex: number;
      correctAnswers: number;
      totalQuestions: number;
      currentQuestion: any;
      timeLeft: number;
    }) => {
      console.log('üîÑ [EXAM] –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–∫–∑–∞–º–µ–Ω:', payload);
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —ç–∫–∑–∞–º–µ–Ω–∞
      dispatch(setExamQuestions(payload.questions));
      dispatch(setExamIndex(payload.currentIndex));
      dispatch(openExamModal());
      
      console.log(`üìä [EXAM] –≠–∫–∑–∞–º–µ–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –≤–æ–ø—Ä–æ—Å ${payload.currentIndex + 1}/${payload.totalQuestions}, –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${payload.correctAnswers}`);
      console.log(`‚è∞ [EXAM] –¢–∞–π–º–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –æ—Å—Ç–∞–ª–æ—Å—å ${payload.timeLeft} —Å–µ–∫—É–Ω–¥`);
    };

    const onExamComplete = () => {
      dispatch(closeExamModal());
      dispatch(clearExamQuestions());
      dispatch(setExamIndex(0));
    };

    const onCloseModal = () => {
      dispatch(closeModal());
    };

    const onNewAchievements = (payload: any) => {
      console.log('üèÜ [CLIENT] –ü–æ–ª—É—á–∏–ª lobby:newAchievements:', payload);
      // –≠–º–∏—Ç–∏–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
      window.dispatchEvent(new CustomEvent('achievement:received', { 
        detail: payload 
      }));
    };

    const onUserNewAchievements = (payload: any) => {
      console.log('üèÜ [CLIENT] –ü–æ–ª—É—á–∏–ª user:newAchievements:', payload);
      // –≠–º–∏—Ç–∏–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
      window.dispatchEvent(new CustomEvent('achievement:received', { 
        detail: payload 
      }));
    };

    const onCloseExamModal = () => {
      dispatch(closeExamModal());
    };

    const onExamReward = (payload: { 
      message: string; 
      rewardPoints: number; 
      sessionScore: number; 
      userScores?: Array<{ userId: number; userScore: number }> 
    }) => {
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—á–µ—Ç –ª–æ–±–±–∏
      dispatch(mergeScores({
        sessionScore: payload.sessionScore
      }));
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—á–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ
      if (payload.userScores && user?.id) {
        const currentUserScore = payload.userScores.find(us => Number(us.userId) === Number(user.id));
        if (currentUserScore) {
          console.log('üéØ –û–±–Ω–æ–≤–ª—è–µ–º –æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
            userId: user.id,
            newScore: currentUserScore.userScore,
            sessionScore: payload.sessionScore
          });
          dispatch(mergeScores({
            userScore: currentUserScore.userScore
          }));
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–∞–≥–∞–∑–∏–Ω–µ
          dispatch(updateUserScore(currentUserScore.userScore));
        }
      }

      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —Å –ø–µ—Ä–µ—Ö–æ–¥–æ–º –Ω–∞ –Ω–æ–≤—É—é —Ñ–∞–∑—É
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä —Ñ–∞–∑—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–≥—Ä–∞–¥—ã (30 –æ—á–∫–æ–≤ = —Ñ–∞–∑–∞ 2, 60 –æ—á–∫–æ–≤ = —Ñ–∞–∑–∞ 3)
      const phaseNumber = payload.rewardPoints === 30 ? 2 : 3;
      dispatch(openPhaseTransitionModal({
        phaseNumber,
        rewardPoints: payload.rewardPoints
      }));
    };

    const onExamFailed = (payload: {
      message: string;
      correctAnswers: number;
      totalQuestions: number;
      successRate: number;
      phaseId: number;
    }) => {
      console.log('‚ùå [EXAM] –≠–∫–∑–∞–º–µ–Ω –ø—Ä–æ–≤–∞–ª–µ–Ω:', payload);
      
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ–≤–∞–ª–∞ —ç–∫–∑–∞–º–µ–Ω–∞
      dispatch(openExamFailureModal({
        correctAnswers: payload.correctAnswers,
        totalQuestions: payload.totalQuestions,
        successRate: payload.successRate,
        phaseId: payload.phaseId,
      }));
    };

    const onExamIncorrectAnswer = (payload: { message: string }) => {
      console.log('‚ùå [EXAM] –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —ç–∫–∑–∞–º–µ–Ω–µ:', payload);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
      dispatch(setModalResult(payload.message));
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        dispatch(setModalResult(null));
      }, 2000);
    };

    const onExamAnswerSync = (payload: { answer: string; activePlayerName: string }) => {
      console.log('üîÑ [EXAM] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞:', payload);
      // –≠—Ç–æ —Å–æ–±—ã—Ç–∏–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ ExamModal —á–µ—Ä–µ–∑ –ø—Ä–æ–ø—Å—ã
    };

    const onAnswerSync = (payload: { answer: string; activePlayerName: string }) => {
      console.log('üîÑ [QUESTION] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞:', payload);
      // –≠—Ç–æ —Å–æ–±—ã—Ç–∏–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ QuestionModal —á–µ—Ä–µ–∑ –ø—Ä–æ–ø—Å—ã
    };

    const onAnswerInput = (payload: { answer: string; activePlayerName: string }) => {
      console.log('üîÑ [QUESTION] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–≤–æ–¥–∞:', payload);
      if (onAnswerInputSync) {
        onAnswerInputSync(payload.answer);
      }
    };

    const onExamAnswerInput = (payload: { answer: string; activePlayerName: string }) => {
      console.log('üîÑ [EXAM] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–≤–æ–¥–∞:', payload);
      if (onExamAnswerInputSync) {
        onExamAnswerInputSync(payload.answer);
      }
    };

    const onExamTimerReset = (payload: { timeLeft: number }) => {
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
      console.log('‚è∞ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–∞–π–º–µ—Ä–∞ —ç–∫–∑–∞–º–µ–Ω–∞:', payload.timeLeft);
      
      // –≠–º–∏—Ç–∏–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–∞–π–º–µ—Ä–∞ –≤ ExamModal
      window.dispatchEvent(new CustomEvent('exam:timerReset', { 
        detail: { timeLeft: payload.timeLeft } 
      }));
    };

    const onTimerReset = (payload: { timeLeft: number }) => {
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä –æ–±—ã—á–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
      console.log('‚è∞ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–∞–π–º–µ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞:', payload.timeLeft);
      
      // –≠–º–∏—Ç–∏–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–∞–π–º–µ—Ä–∞ –≤ QuestionModal
      window.dispatchEvent(new CustomEvent('question:timerReset', { 
        detail: { timeLeft: payload.timeLeft } 
      }));
    };

    const onReconnectWaiting = (payload: { activePlayerName: string; timeLeft: number }) => {
      console.log('‚è≥ [RECONNECT] –ù–∞—á–∏–Ω–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', payload);
      dispatch(openReconnectWaitingModal({
        activePlayerName: payload.activePlayerName,
        timeLeft: payload.timeLeft
      }));
    };

    const onReconnectTimeout = () => {
      console.log('‚è∞ [RECONNECT] –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ');
      dispatch(closeReconnectWaitingModal());
    };

    const onReconnectCanceled = () => {
      console.log('‚úÖ [RECONNECT] –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ, –∏–≥—Ä–æ–∫ –≤–µ—Ä–Ω—É–ª—Å—è');
      dispatch(closeReconnectWaitingModal());
    };

    const onActiveQuestion = (payload: { 
      questionId: number;
      topic: string;
      question: string;
      mentor_tip?: string;
      pointId: string;
      timeLeft: number;
    }) => {
      console.log('üëÅÔ∏è [INACTIVE] –ü–æ–ª—É—á–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', payload);
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
      dispatch(openModal({
        questionId: payload.questionId,
        topic: payload.topic,
        question: payload.question,
        mentor_tip: payload.mentor_tip
      }));
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º currentPointId
      window.dispatchEvent(new CustomEvent('question:setCurrentPointId', { 
        detail: { pointId: payload.pointId } 
      }));
      
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä
      setTimeout(() => {
        window.dispatchEvent(new CustomEvent('question:timerReset', { 
          detail: { timeLeft: payload.timeLeft } 
        }));
      }, 200);
    };

    const onNoActiveQuestion = () => {
      console.log('‚ùå [INACTIVE] –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
      // –≠–º–∏—Ç–∏–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      window.dispatchEvent(new CustomEvent('question:noActiveQuestion'));
    };

    const onWrongPoint = (payload: { requestedPointId: string; activePointId: string }) => {
      console.log('‚ùå [INACTIVE] –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–∏–Ω—Ç! –ó–∞–ø—Ä–æ—à–µ–Ω:', payload.requestedPointId, '–∞–∫—Ç–∏–≤–Ω—ã–π:', payload.activePointId);
      // –≠–º–∏—Ç–∏–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ–∏–Ω—Ç–µ
      window.dispatchEvent(new CustomEvent('question:wrongPoint', { 
        detail: payload 
      }));
    };

    const onActiveExam = (payload: { 
      examId: string;
      questions: any[];
      currentIndex: number;
      correctAnswers: number;
      totalQuestions: number;
      currentQuestion: any;
      timeLeft: number;
    }) => {
      console.log('üëÅÔ∏è [INACTIVE] –ü–æ–ª—É—á–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —ç–∫–∑–∞–º–µ–Ω –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', payload);
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —ç–∫–∑–∞–º–µ–Ω–∞ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
      dispatch(setExamQuestions(payload.questions));
      dispatch(setExamIndex(payload.currentIndex));
      dispatch(openExamModal());
      
      console.log(`üìä [EXAM] –≠–∫–∑–∞–º–µ–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞: –≤–æ–ø—Ä–æ—Å ${payload.currentIndex + 1}/${payload.totalQuestions}`);
      
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä
      setTimeout(() => {
        window.dispatchEvent(new CustomEvent('exam:timerReset', { 
          detail: { timeLeft: payload.timeLeft } 
        }));
      }, 200);
    };

    const onNoActiveExam = () => {
      console.log('‚ùå [INACTIVE] –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–∫–∑–∞–º–µ–Ω–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
      // –≠–º–∏—Ç–∏–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      window.dispatchEvent(new CustomEvent('exam:noActiveExam'));
    };

    const onWrongExam = (payload: { requestedExamId: string; activeExamId: string }) => {
      console.log('‚ùå [INACTIVE] –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–∫–∑–∞–º–µ–Ω! –ó–∞–ø—Ä–æ—à–µ–Ω:', payload.requestedExamId, '–∞–∫—Ç–∏–≤–Ω—ã–π:', payload.activeExamId);
      // –≠–º–∏—Ç–∏–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —ç–∫–∑–∞–º–µ–Ω–µ
      window.dispatchEvent(new CustomEvent('exam:wrongExam', { 
        detail: payload 
      }));
    };

    const onActivePointChanged = (payload: { activePointId: string | null }) => {
      console.log('üéØ [ACTIVE POINT] –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏–Ω—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤:', payload.activePointId);
      
      // –≠–º–∏—Ç–∏–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏–Ω—Ç–∞ —É –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
      window.dispatchEvent(new CustomEvent('lobby:activePointChanged', { 
        detail: payload 
      }));
    };

    const onFavoriteToggled = (payload: { 
      userId: number; 
      questionId: number; 
      isFavorite: boolean; 
      username: string;
    }) => {
      console.log('‚≠ê [FAVORITE] –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω/—É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', payload);
      
      // –≠–º–∏—Ç–∏–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
      window.dispatchEvent(new CustomEvent('favorite:sync', { 
        detail: payload 
      }));
    };
    socket.on("connect", () => {
      setConnected(true);
      setConnecting(false);
    });
    socket.on("disconnect", onDisconnect);
    socket.on("connect_error", onConnectError);
    socket.on("chat:history", onHistory);
    socket.on("chat:message", onChatMessage);
    socket.on("system", onSystem);
    socket.on("error", onError);
    socket.on("lobby:users", onUsers);
    socket.on("lobby:initPoints", (serverPoints) => {
      const mapped = serverPoints.map((p: any) => {    // –∏—Å–ø—Ä–∞–≤–∏—Ç—å any
        const clientPoint = initialState.points.find(cp => cp.id === String(p.id));
        return {
          id: String(p.id),
          title: p.title,
          status: p.status,
          phaseId: p.phase_id,
          topicId: p.topic_id,
          top: clientPoint?.top ?? 0,
          left: clientPoint?.left ?? 0,
        };
      });
      dispatch(setPoints(mapped));
    });
    socket.on("lobby:updatePointStatus", onPointStatus);
    socket.on("lobby:initScores", onInitScores);
    socket.on("lobby:scores", onScores);
    socket.on("lobby:incorrectAnswer", onIncorrectAnswer);
    socket.on("lobby:incorrectCountUpdate", onIncorrectCountUpdate);
    socket.on("lobby:correctAnswer", onCorrectAnswer);
    socket.on("lobby:examCorrectAnswer", onExamCorrectAnswer);
    socket.on("lobby:openModal", onOpenModal);
    socket.on("lobby:questionRestore", onQuestionRestore);
    socket.on("lobby:examStart", onExamStart);
    socket.on("lobby:examNext", onExamNext);
    socket.on("lobby:examRestore", onExamRestore);
    socket.on("lobby:examComplete", onExamComplete);
    socket.on("lobby:examReward", onExamReward);
    socket.on("lobby:examFailed", onExamFailed);
    socket.on("lobby:examIncorrectAnswer", onExamIncorrectAnswer);
    socket.on("lobby:examAnswerSync", onExamAnswerSync);
    socket.on("lobby:answerSync", onAnswerSync);
    socket.on("lobby:answerInput", onAnswerInput);
    socket.on("lobby:examAnswerInput", onExamAnswerInput);
    socket.on("lobby:examTimerReset", onExamTimerReset);
    socket.on("lobby:timerReset", onTimerReset);
    socket.on("lobby:reconnectWaiting", onReconnectWaiting);
    socket.on("lobby:reconnectTimeout", onReconnectTimeout);
    socket.on("lobby:reconnectCanceled", onReconnectCanceled);
    socket.on("lobby:timeout", onTimeout);
    socket.on("lobby:passTurnNotification", onPassTurnNotification);
    socket.on("lobby:closeModal", onCloseModal);
    socket.on("lobby:newAchievements", onNewAchievements);
    socket.on("user:newAchievements", onUserNewAchievements);
    socket.on("lobby:closeExamModal", onCloseExamModal);
    socket.on("lobby:activeQuestion", onActiveQuestion);
    socket.on("lobby:noActiveQuestion", onNoActiveQuestion);
    socket.on("lobby:wrongPoint", onWrongPoint);
    socket.on("lobby:activeExam", onActiveExam);
    socket.on("lobby:noActiveExam", onNoActiveExam);
    socket.on("lobby:wrongExam", onWrongExam);
    socket.on("lobby:activePointChanged", onActivePointChanged);
    socket.on("lobby:favoriteToggled", onFavoriteToggled);

    return () => {
      // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º leaveLobby –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ - –ø—É—Å—Ç—å —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –æ–±—ã—á–Ω—ã–π disconnect
      // socket.emit("leaveLobby");
      socket.off("connect", onConnect);
      socket.off("disconnect", onDisconnect);
      socket.off("connect_error", onConnectError);
      socket.off("chat:history", onHistory);
      socket.off("chat:message", onChatMessage);
      socket.off("system", onSystem);
      socket.off("error", onError);
      socket.off("lobby:users", onUsers);
      socket.off("lobby:initPoints", onInitPoints);
      socket.off("lobby:updatePointStatus", onPointStatus);
      socket.off("lobby:initScores", onInitScores);
      socket.off("lobby:scores", onScores);
      socket.off("lobby:incorrectAnswer", onIncorrectAnswer);
      socket.off("lobby:incorrectCountUpdate", onIncorrectCountUpdate);
      socket.off("lobby:correctAnswer", onCorrectAnswer);
      socket.off("lobby:examCorrectAnswer", onExamCorrectAnswer);
      socket.off("lobby:timeout", onTimeout);
      socket.off("lobby:passTurnNotification", onPassTurnNotification);
      socket.off("lobby:openModal", onOpenModal);
      socket.off("lobby:questionRestore", onQuestionRestore);
      socket.off("lobby:examStart", onExamStart);
      socket.off("lobby:examNext", onExamNext);
      socket.off("lobby:examRestore", onExamRestore);
      socket.off("lobby:examComplete", onExamComplete);
      socket.off("lobby:examReward", onExamReward);
      socket.off("lobby:examAnswerSync", onExamAnswerSync);
      socket.off("lobby:answerSync", onAnswerSync);
      socket.off("lobby:answerInput", onAnswerInput);
      socket.off("lobby:examAnswerInput", onExamAnswerInput);
      socket.off("lobby:examTimerReset", onExamTimerReset);
      socket.off("lobby:timerReset", onTimerReset);
      socket.off("lobby:reconnectWaiting", onReconnectWaiting);
      socket.off("lobby:reconnectTimeout", onReconnectTimeout);
      socket.off("lobby:reconnectCanceled", onReconnectCanceled);
      socket.off("lobby:closeModal", onCloseModal);
      socket.off("lobby:newAchievements", onNewAchievements);
      socket.off("user:newAchievements", onUserNewAchievements);
      socket.off("lobby:activeQuestion", onActiveQuestion);
      socket.off("lobby:noActiveQuestion", onNoActiveQuestion);
      socket.off("lobby:wrongPoint", onWrongPoint);
      socket.off("lobby:activeExam", onActiveExam);
      socket.off("lobby:noActiveExam", onNoActiveExam);
      socket.off("lobby:wrongExam", onWrongExam);
      socket.off("lobby:activePointChanged", onActivePointChanged);
      socket.off("lobby:favoriteToggled", onFavoriteToggled);
      socket.disconnect();
    };
  }, [dispatch, lobbyId, token]);

  const sendChatMessage = (text: string) => {
    if (!text.trim() || !connected) return;
    socketClient.socket.emit("chat:message", { text });
  };

  const sendAnswer = (pointId: string, correct: boolean, answer?: string) => {
    socketClient.socket.emit("lobby:answer", { lobbyId, pointId, correct, answer });
  };

  const sendTimeout = (pointId: string) => {
    socketClient.socket.emit("lobby:timeout", { lobbyId, pointId });
  };

  const sendExamComplete = (correctAnswers: number, totalQuestions: number) => {
    socketClient.socket.emit("lobby:examComplete", { lobbyId, correctAnswers, totalQuestions});
  };
  
  const sendOpenModal = (payload: { questionId: number; topic: string; question: string; mentor_tip?: string; pointId?: string }) => {
    socketClient.socket.emit("lobby:openModal", payload);
  };
  const sendOpenExam = (payload?: { questions?: any[]; examId?: string }) => {
    socketClient.socket.emit("lobby:openExam", payload ?? {});
  };
  const sendExamAnswerProgress = (correct?: boolean, isTimeout?: boolean, answer?: string) => {
    socketClient.socket.emit("lobby:examAnswer", { 
      correct: Boolean(correct), 
      isTimeout: Boolean(isTimeout),
      answer: answer 
    });
  };

  const sendCloseModal = () => {
    socketClient.socket.emit("lobby:closeModal");
  };

  const sendIncorrectAnswer = (incorrectCount: number) => {
    socketClient.socket.emit("lobby:incorrectAnswer", { incorrectAnswers: incorrectCount });
  };

  const sendPassTurn = () => {
    socketClient.socket.emit("lobby:passTurn");
  };

  const sendIncorrectCountUpdate = (incorrectCount: number) => {
    socketClient.socket.emit("lobby:incorrectCountUpdate", { incorrectAnswers: incorrectCount });
  };

  const sendCorrectAnswer = () => {
    socketClient.socket.emit("lobby:correctAnswer");
  };

  const sendPassTurnNotification = () => {
    socketClient.socket.emit("lobby:passTurnNotification");
  };

  const sendAnswerInput = (answer: string, activePlayerName: string) => {
    socketClient.socket.emit("lobby:answerInput", { answer, activePlayerName });
  };

  const sendExamAnswerInput = (answer: string, activePlayerName: string) => {
    socketClient.socket.emit("lobby:examAnswerInput", { answer, activePlayerName });
  };

  const sendFavoriteToggle = (questionId: number, isFavorite: boolean) => {
    socketClient.socket.emit("lobby:favoriteToggle", { questionId, isFavorite });
  };

  const sendLeaveLobby = () => {
    socketClient.socket.emit("leaveLobby");
  };

  const sendCheckActiveQuestion = (pointId?: string) => {
    socketClient.socket.emit("lobby:checkActiveQuestion", { pointId });
  };

  const sendCheckActiveExam = (examId?: string) => {
    socketClient.socket.emit("lobby:checkActiveExam", { examId });
  };

  return {
    history,
    connected,
    connecting,
    currentUserId: user?.id ?? 0,
    sendChatMessage,
    sendAnswer,
    sendTimeout,
    sendExamComplete,
    sendOpenModal,
    sendOpenExam,
    sendExamAnswerProgress,
    sendCloseModal,
    sendIncorrectAnswer,
    sendPassTurn,
    sendIncorrectCountUpdate,
    sendCorrectAnswer,
    sendPassTurnNotification,
    sendAnswerInput,
    sendExamAnswerInput,
    sendFavoriteToggle,
    sendLeaveLobby,
    sendCheckActiveQuestion,
    sendCheckActiveExam,
  };
};
