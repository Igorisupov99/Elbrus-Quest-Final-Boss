const axios = require('axios');

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ fibonacci
const testData = {
  taskId: 'test-fibonacci',
  userCode: `function fibonacci(n) {
  if (n <= 1) return n;
  return fibonacci(n - 1) + fibonacci(n - 2);
}

// –ò –≤–æ–∑–≤—Ä–∞—â–∞–µ–º, –∏ –≤—ã–≤–æ–¥–∏–º
const result = fibonacci(5);
console.log(result);
result;`,
  taskDescription: '–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é fibonacci, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç n-–µ —á–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á—á–∏',
  testCases: [
    {
      "input": "5",
      "expectedOutput": "5",
      "description": "fibonacci(5) –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 5"
    },
    {
      "input": "10", 
      "expectedOutput": "55",
      "description": "fibonacci(10) –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 55"
    }
  ]
};

async function testValidation() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –∫–æ–¥–∞...');
    console.log('–ö–æ–¥:', testData.userCode);
    console.log('–¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏:', JSON.stringify(testData.testCases, null, 2));
    
    const response = await axios.post('http://localhost:3001/api/ai/ide/validate-code', testData);
    
    console.log('\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏:');
    console.log('–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤:', response.data.passedTests, '/', response.data.totalTests);
    console.log('–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã:', response.data.isCorrect);
    
    if (response.data.testResults) {
      console.log('\nüìä –î–µ—Ç–∞–ª–∏ —Ç–µ—Å—Ç–æ–≤:');
      response.data.testResults.forEach((test, index) => {
        console.log(`–¢–µ—Å—Ç ${index + 1}: ${test.passed ? '‚úÖ' : '‚ùå'} ${test.testCase.description}`);
        console.log(`  –û–∂–∏–¥–∞–ª–æ—Å—å: ${test.expectedOutput} (${typeof test.expectedOutput})`);
        console.log(`  –ü–æ–ª—É—á–µ–Ω–æ: ${test.actualOutput} (${typeof test.actualOutput})`);
      });
    }
    
    if (response.data.errorMessage) {
      console.log('‚ùå –û—à–∏–±–∫–∞:', response.data.errorMessage);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    if (error.response) {
      console.error('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error.response.data);
    }
  }
}

// –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
setTimeout(testValidation, 3000);
