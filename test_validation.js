const axios = require('axios');

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ countFrequency
const testData = {
  taskId: 'test-count-frequency',
  userCode: `function countFrequency(input) {
  // –ï—Å–ª–∏ –≤—Ö–æ–¥–Ω–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä - –æ–±—ä–µ–∫—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –∫–ª—é—á–∏
  if (typeof input === 'object' && input !== null && !Array.isArray(input)) {
    return Object.keys(input);
  }
  
  // –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤, —Ä–∞–±–æ—Ç–∞–µ–º –∫–∞–∫ —Ä–∞–Ω—å—à–µ
  if (Array.isArray(input)) {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const frequency = {};

    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –º–∞—Å—Å–∏–≤–∞
    for (let i = 0; i < input.length; i++) {
      const element = input[i];

      // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —É–∂–µ –µ—Å—Ç—å –≤ –æ–±—ä–µ–∫—Ç–µ, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –µ–≥–æ —á–∞—Å—Ç–æ—Ç—É –Ω–∞ 1
      if (frequency[element]) {
        frequency[element]++;
      } else {
        // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –µ—â—ë –Ω–µ—Ç –≤ –æ–±—ä–µ–∫—Ç–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Å —á–∞—Å—Ç–æ—Ç–æ–π 1
        frequency[element] = 1;
      }
    }

    // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ)
    const uniqueElements = [];
    for (const element in frequency) {
      if (frequency[element] === 1) {
        uniqueElements.push(Number(element));
      }
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    return uniqueElements;
  }
  
  // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
  return [];
}`,
  taskDescription: '–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é countFrequency, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –µ–≥–æ –∫–ª—é—á–µ–π',
  testCases: [
    {
      "input": {"a": 1, "b": 2, "c": 3},
      "expectedOutput": ["a", "b", "c"],
      "description": "–ö–ª—é—á–∏ –æ–±—ä–µ–∫—Ç–∞"
    },
    {
      "input": {"x": 10, "y": 20},
      "expectedOutput": ["x", "y"],
      "description": "–ó–Ω–∞—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞"
    },
    {
      "input": {},
      "expectedOutput": [],
      "description": "–ü—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç"
    }
  ]
};

async function testValidation() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –∫–æ–¥–∞...');
    console.log('–ö–æ–¥:', testData.userCode);
    console.log('–¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏:', JSON.stringify(testData.testCases, null, 2));
    
    const response = await axios.post('http://localhost:3001/api/ai/ide/validate-code', testData);
    
    console.log('\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏:');
    console.log('–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤:', response.data.passedTests, '/', response.data.totalTests);
    console.log('–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã:', response.data.isCorrect);
    
    if (response.data.testResults) {
      console.log('\nüìä –î–µ—Ç–∞–ª–∏ —Ç–µ—Å—Ç–æ–≤:');
      response.data.testResults.forEach((test, index) => {
        console.log(`–¢–µ—Å—Ç ${index + 1}: ${test.passed ? '‚úÖ' : '‚ùå'} ${test.testCase.description}`);
        console.log(`  –û–∂–∏–¥–∞–ª–æ—Å—å: ${test.expectedOutput} (${typeof test.expectedOutput})`);
        console.log(`  –ü–æ–ª—É—á–µ–Ω–æ: ${test.actualOutput} (${typeof test.actualOutput})`);
      });
    }
    
    if (response.data.errorMessage) {
      console.log('‚ùå –û—à–∏–±–∫–∞:', response.data.errorMessage);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    if (error.response) {
      console.error('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error.response.data);
    }
  }
}

// –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
setTimeout(testValidation, 3000);
